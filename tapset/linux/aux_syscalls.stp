
%{
// Be sure we have the __NR_* defines.
#include <asm/unistd.h>
#include "linux/compat_unistd.h"

// Be sure we have the SYS_* defines.
#include <linux/net.h>
#include "linux/compat_net.h"

/*
* Simple lookup functions for mapping values to names
* using embedded C. Use these functions to create safe,
* consistent lookups.
*/

/* Convenient macro to add defines to an array */
#define V(a) {a,#a}

typedef struct {
	long val;
	char *name;
} _stp_val_array;

static void
_stp_lookup_str(const _stp_val_array * const array, long val, char *ptr,
		int len)
{
	int i = 0, slen;
	while (array[i].name) {
		if (array[i].val == val) {
			strlcat (ptr, array[i].name, len);
			return;
		}
		i++;
	}
	slen = strlen(ptr);
	_stp_snprintf(ptr + slen, len - slen, "0x%lx", val);
}

static void
_stp_lookup_or_str(const _stp_val_array * const array, long val, char *ptr,
		   int len)
{
	int i = 0, flag = 0, slen;

	if (val == 0) {
		_stp_lookup_str(array, val, ptr, len);
		return;
	}

	while (array[i].name) {
		if (array[i].val & val) {
			if (flag)
				strlcat(ptr, "|", len);
			strlcat(ptr, array[i].name, len);
			val &= (~array[i].val);
			flag = 1;
		}
		i++;
	}
	if (val) {
		if (flag)
			strlcat(ptr, "|", len);
		slen = strlen(ptr);
		_stp_snprintf(ptr + slen, len - slen, "0x%lx", val);
	}
}
%}

function _stp_syscall_nr:long ()
%{ /* pure */
	struct pt_regs *regs = _stp_current_pt_regs();
	if (!regs) {
		CONTEXT->last_error = ("Cannot access syscall number"
				       " (no registers available)");
		return;
	}
	STAP_RETVALUE = syscall_get_nr(current, regs);
%}

%{
#ifdef CONFIG_COMPAT
#include <linux/compat.h>

#ifndef STAPCONF_SIGSET_FROM_COMPAT_EXPORTED
void
sigset_from_compat(sigset_t *set, compat_sigset_t *compat)
{
	switch (_NSIG_WORDS) {
	case 4: set->sig[3] = compat->sig[6] | (((long)compat->sig[7]) << 32 );
	case 3: set->sig[2] = compat->sig[4] | (((long)compat->sig[5]) << 32 );
	case 2: set->sig[1] = compat->sig[2] | (((long)compat->sig[3]) << 32 );
	case 1: set->sig[0] = compat->sig[0] | (((long)compat->sig[1]) << 32 );
	}
}
#endif /* STAPCONF_SIGSET_FROM_COMPAT_EXPORTED */
#endif /* CONFIG_COMPAT */

%}

#
# Given a userspace pointer to a timeval,
# copy and decode it and return a string.
#
function _struct_timeval_u:string(uaddr:long, n:long)
%{ /* pure */
	int n = (int)STAP_ARG_n;
	struct timeval tv[n];
	char *ptr = (char *)(unsigned long)STAP_ARG_uaddr;
	
	if (ptr == NULL || n < 1 || n > 2)
		strlcpy (STAP_RETVALUE, "NULL", MAXSTRINGLEN);
	else {
		if (_stp_copy_from_user((char*)&tv, ptr,
					n*sizeof(struct timeval)) == 0) {
			if (n == 2)
				snprintf(STAP_RETVALUE, MAXSTRINGLEN,
					 "[%ld.%06ld][%ld.%.06ld]", 
					 tv[0].tv_sec, tv[0].tv_usec,
					 tv[1].tv_sec, tv[1].tv_usec);
			else
				snprintf(STAP_RETVALUE, MAXSTRINGLEN,
					 "[%ld.%06ld]", tv[0].tv_sec,
					 tv[0].tv_usec);
	   	}
		else
			snprintf(STAP_RETVALUE, MAXSTRINGLEN, "0x%lx",
				 (unsigned long)ptr);
	}
%}

function _struct_compat_timeval_u:string(uaddr:long, n:long)
%{ /* pure */
#ifdef CONFIG_COMPAT
	int n = (int)STAP_ARG_n;
	struct compat_timeval tv[n];
	char *ptr = (char *)(unsigned long)STAP_ARG_uaddr;

	if (ptr == NULL || n < 1 || n > 2)
		strlcpy (STAP_RETVALUE, "NULL", MAXSTRINGLEN);
	else {
		if (_stp_copy_from_user((char*)&tv, ptr,
					n*sizeof(struct compat_timeval)) == 0) {
			if (n == 2)
				snprintf(STAP_RETVALUE, MAXSTRINGLEN,
					 "[%ld.%06ld][%ld.%.06ld]", 
					 (long)tv[0].tv_sec,
					 (long)tv[0].tv_usec,
					 (long)tv[1].tv_sec,
					 (long)tv[1].tv_usec);
			else
				snprintf(STAP_RETVALUE, MAXSTRINGLEN,
					 "[%ld.%06ld]", (long)tv[0].tv_sec,
					 (long)tv[0].tv_usec);
		}
	   	else
			snprintf(STAP_RETVALUE, MAXSTRINGLEN, "0x%lx",
				 (unsigned long)ptr);
	}
#endif
%}

function _struct_timezone_u:string(uaddr:long)
%{ /* pure */
	struct timezone tz;
	char *ptr = (char *)(unsigned long)STAP_ARG_uaddr;
	
	if (ptr == NULL)
		strlcpy (STAP_RETVALUE, "NULL", MAXSTRINGLEN);
	else {
		if (_stp_copy_from_user((char*)&tz, ptr,
					sizeof(struct timezone)) == 0)
			snprintf(STAP_RETVALUE, MAXSTRINGLEN, "[%d, %d]",
				 tz.tz_minuteswest, tz.tz_dsttime);
		else
			snprintf(STAP_RETVALUE, MAXSTRINGLEN, "0x%lx",
				 (unsigned long)ptr);
	}
%} 

%{
// Needed for the following four functions
// _struct_utimbuf_actime, _struct_utimbuf_modtime,
// _struct_compat_utimbuf_actime, _struct_compat_utimbuf_modtime
#include <linux/utime.h>
%}

function _stp_clock_nanosleep_flags_str:string(flags:long)
%{ /* pure */
	static const _stp_val_array const nanosleep_flags_list[] = {
		V(TIMER_ABSTIME),
		{0, NULL}
	};
	_stp_lookup_str(nanosleep_flags_list, (unsigned int)STAP_ARG_flags,
			STAP_RETVALUE, MAXSTRINGLEN);
%}

// Returns the value of the actime field of a utimbuf in user space
// at the given address, or zero on when userspace data is not accessible.
function _struct_utimbuf_actime:long(uaddr:long)
%{ /* pure */
	struct utimbuf ubuf;
	char *ptr = (char *)(unsigned long)STAP_ARG_uaddr;
	
	if (ptr == NULL)
	  STAP_RETVALUE = 0;
	else
	  if(_stp_copy_from_user((char*)&ubuf,ptr,sizeof(ubuf)) == 0)
	    STAP_RETVALUE = ubuf.actime;
	  else
	    STAP_RETVALUE = 0;
%} 

// Returns the value of the modtime field of a utimbuf in user space
// at the given address, or zero on when userspace data is not accessible.
function _struct_utimbuf_modtime:long(uaddr:long)
%{ /* pure */
	struct utimbuf ubuf;
	char *ptr = (char *)(unsigned long)STAP_ARG_uaddr;
	
	if (ptr == NULL)
	  STAP_RETVALUE = 0;
	else
	  if(_stp_copy_from_user((char*)&ubuf,ptr,sizeof(ubuf)) == 0)
	    STAP_RETVALUE = ubuf.modtime;
	  else
	    STAP_RETVALUE = 0;
%} 

// Returns the value of the actime field of a compat_utimbuf in user space
// at the given address, or zero on when userspace data is not accessible.
function _struct_compat_utimbuf_actime:long(uaddr:long)
%{ /* pure */
#ifdef CONFIG_COMPAT
	struct compat_utimbuf ubuf;
	char *ptr = (char *)(unsigned long)STAP_ARG_uaddr;
	
	if (ptr == NULL)
	  STAP_RETVALUE = 0;
	else
	  if(_stp_copy_from_user((char*)&ubuf,ptr,sizeof(ubuf)) == 0)
	    STAP_RETVALUE = ubuf.actime;
	  else
	    STAP_RETVALUE = 0;
#endif
%} 

// Returns the value of the modtime field of a compat_utimbuf in user space
// at the given address, or zero on when userspace data is not accessible.
function _struct_compat_utimbuf_modtime:long(uaddr:long)
%{ /* pure */
#ifdef CONFIG_COMPAT
	struct compat_utimbuf ubuf;
	char *ptr = (char *)(unsigned long)STAP_ARG_uaddr;
	
	if (ptr == NULL)
	  STAP_RETVALUE = 0;
	else
	  if(_stp_copy_from_user((char*)&ubuf,ptr,sizeof(ubuf)) == 0)
	    STAP_RETVALUE = ubuf.modtime;
	  else
	    STAP_RETVALUE = 0;
#endif
%} 

function _struct_timespec_u:string(uaddr:long, n:long)
%{ /* pure */
#define STP_UTIME_NOW  ((1l << 30) - 1l)
#define STP_UTIME_OMIT ((1l << 30) - 2l)
	int n = (int)STAP_ARG_n;
	struct timespec ts[n];
	char *ptr = (char *)(unsigned long)STAP_ARG_uaddr;

	if (ptr == NULL || n < 1 || n > 2)
		strlcpy (STAP_RETVALUE, "NULL", MAXSTRINGLEN);
	else {
		if (_stp_copy_from_user((char *)&ts, ptr,
		    n*sizeof(struct timespec)))  {
			snprintf(STAP_RETVALUE, MAXSTRINGLEN, "0x%lx",
				 (unsigned long)ptr);
		}
		else {
			char *str;
			int len, i = 0;
			ptr = STAP_RETVALUE;
			while (i < n) {
				str = NULL;
				if (ts[i].tv_nsec == STP_UTIME_NOW)
					str = "UTIME_NOW";
				else if (ts[i].tv_nsec == STP_UTIME_OMIT)
					str = "UTIME_OMIT";
				if (str)
					len = snprintf(ptr, MAXSTRINGLEN,
						       "[%s]", str);
				else
					len = snprintf(ptr, MAXSTRINGLEN,
						       "[%ld.%09ld]",
						       (long)ts[i].tv_sec,
						       ts[i].tv_nsec);
				ptr += len;
				i++;
			}
		}
	}
#undef STP_UTIME_NOW
#undef STP_UTIME_OMIT
%}

function _struct_compat_timespec_u:string(uaddr:long, n:long)
%{ /* pure */
#ifdef CONFIG_COMPAT
#define STP_UTIME_NOW  ((1l << 30) - 1l)
#define STP_UTIME_OMIT ((1l << 30) - 2l)
	int n = (int)STAP_ARG_n;
	struct compat_timespec ts[n];
	char *ptr = (char *)(unsigned long)STAP_ARG_uaddr;

	if (ptr == NULL || n < 1 || n > 2)
		strlcpy (STAP_RETVALUE, "NULL", MAXSTRINGLEN);
	else {
		if (_stp_copy_from_user((char *)&ts, ptr,
		    n*sizeof(struct compat_timespec)))  {
			snprintf(STAP_RETVALUE, MAXSTRINGLEN, "0x%lx",
				 (unsigned long)ptr);
		}
		else {
			char *str;
			int len, i = 0;
			ptr = STAP_RETVALUE;
			while (i < n) {
				str = NULL;
				if (ts[i].tv_nsec == STP_UTIME_NOW)
					str = "UTIME_NOW";
				else if (ts[i].tv_nsec == STP_UTIME_OMIT)
					str = "UTIME_OMIT";
				if (str)
					len = snprintf(ptr, MAXSTRINGLEN,
						       "[%s]", str);
				else
					len = snprintf(ptr, MAXSTRINGLEN,
						       "[%ld.%09ld]",
						       (long)ts[i].tv_sec,
						       (long)ts[i].tv_nsec);
				ptr += len;
				i++;
			}
		}
	}
#undef STP_UTIME_NOW
#undef STP_UTIME_OMIT
#endif
%}


function _struct_itimerspec_u:string(uaddr:long)
%{ /* pure */
	struct itimerspec its;
	char *ptr = (char *)(unsigned long)STAP_ARG_uaddr;
	
	if (ptr == NULL)
		strlcpy (STAP_RETVALUE, "NULL", MAXSTRINGLEN);
	else {
		if(_stp_copy_from_user((char *)&its, ptr,sizeof(struct itimerspec)))
			strlcpy (STAP_RETVALUE, "UNKNOWN", MAXSTRINGLEN);
		else
			snprintf(STAP_RETVALUE, MAXSTRINGLEN, "[%d.%06d,%d.%06d]",
				(int)its.it_interval.tv_sec, (int)its.it_interval.tv_nsec,
				(int)its.it_value.tv_sec, (int)its.it_value.tv_nsec);
	}	
%}

function _struct_compat_itimerspec_u:string(uaddr:long)
%{ /* pure */
	struct compat_itimerspec its;
	char *ptr = (char *)(unsigned long)STAP_ARG_uaddr;
	
	if (ptr == NULL)
		strlcpy (STAP_RETVALUE, "NULL", MAXSTRINGLEN);
	else {
		if (_stp_copy_from_user((char *)&its, ptr, sizeof(its)))
			strlcpy (STAP_RETVALUE, "UNKNOWN", MAXSTRINGLEN);
		else
			snprintf(STAP_RETVALUE, MAXSTRINGLEN,
				 "[%d.%06d,%d.%06d]",
				 (int)its.it_interval.tv_sec,
				 (int)its.it_interval.tv_nsec,
				 (int)its.it_value.tv_sec,
				 (int)its.it_value.tv_nsec);
	}	
%}

function _struct_itimerval_u:string(uaddr:long)
%{ /* pure */
	struct itimerval itv;
	char *ptr = (char *)(unsigned long)STAP_ARG_uaddr;

	if (ptr == NULL)
		strlcpy (STAP_RETVALUE, "NULL", MAXSTRINGLEN);
	else {
		if(_stp_copy_from_user((char *)&itv,ptr,sizeof(struct itimerval)))
			strlcpy (STAP_RETVALUE, "UNKNOWN", MAXSTRINGLEN);
		else
			snprintf(STAP_RETVALUE, MAXSTRINGLEN, "[%d.%06d,%d.%06d]", 
				(int)itv.it_interval.tv_sec, (int)itv.it_interval.tv_usec,
				(int)itv.it_value.tv_sec, (int)itv.it_value.tv_usec);
	}
%}

function _struct_compat_itimerval_u:string(uaddr:long)
%{ /* pure */
#ifdef CONFIG_COMPAT
	struct compat_itimerval itv;
	char *ptr = (char *)(unsigned long)STAP_ARG_uaddr;

	if (ptr == NULL)
		strlcpy (STAP_RETVALUE, "NULL", MAXSTRINGLEN);
	else {
		if(_stp_copy_from_user((char *)&itv,ptr,sizeof(struct compat_itimerval)))
			strlcpy (STAP_RETVALUE, "UNKNOWN", MAXSTRINGLEN);
		else
			snprintf(STAP_RETVALUE, MAXSTRINGLEN, "[%d.%06d,%d.%06d]", 
				(int)itv.it_interval.tv_sec, (int)itv.it_interval.tv_usec,
				(int)itv.it_value.tv_sec, (int)itv.it_value.tv_usec);
	}
#endif
%}

%{
// Needed for function _struct_sockaddr_u_impl. Unfortunately cannot be
// inlined into the function since these header files define static
// functions themselves.
#include <linux/socket.h>
#include <linux/in.h>
#include <linux/netlink.h>
%}

%{
// Enum for _struct_sockaddr_u_* functions.
typedef enum {
    SA_PRETTY           = 1,
    SA_IP_ADDR          = 2,
    SA_TCP_PORT         = 4,
    SA_FAMILY           = 8,
    SA_IPV6_FLOWINFO    = 16,
    SA_IPV6_SCOPE_ID    = 32,
} sa_dispatch;
%}

function _struct_sockaddr_u_ip_addr:string(uaddr:long, len:long)
{
    return _struct_sockaddr_u_impl(uaddr, len, %{ SA_IP_ADDR %});
}

function _struct_sockaddr_u_tcp_port:string(uaddr:long, len:long)
{
    return _struct_sockaddr_u_impl(uaddr, len, %{ SA_TCP_PORT %});
}

function _struct_sockaddr_u_ip_addr_tcp_port:string(uaddr:long, len:long)
{
    return _struct_sockaddr_u_impl(uaddr, len, %{ SA_IP_ADDR | SA_TCP_PORT %});
}

function _struct_sockaddr_u_sa_family:string(uaddr:long, len:long)
{
    return _struct_sockaddr_u_impl(uaddr, len, %{ SA_FAMILY %});
}

function _struct_sockaddr_u_ipv6_flowinfo:string(uaddr:long, len:long)
{
    return _struct_sockaddr_u_impl(uaddr, len, %{ SA_IPV6_FLOWINFO %});
}

function _struct_sockaddr_u_ipv6_scope_id:string(uaddr:long, len:long)
{
    return _struct_sockaddr_u_impl(uaddr, len, %{ SA_IPV6_SCOPE_ID %});
}

function _struct_sockaddr_u:string(uaddr:long, len:long)
{
    return _struct_sockaddr_u_impl(uaddr, len, %{ SA_PRETTY %});
}

%{
#define STAP_NEED_CONTEXT_SOCKADDR_BIG_BUFFERS 1
%}

function _struct_sockaddr_u_impl:string(uaddr:long, len:long, what:long)
%{ /* pure */


#include <linux/version.h>
#include <linux/in6.h>
#include <linux/un.h>
#include <linux/if_packet.h>

    sa_dispatch what = (sa_dispatch)STAP_ARG_what;

    char *ptr = (char *)(unsigned long)STAP_ARG_uaddr;
    size_t len = clamp_t(size_t, STAP_ARG_len, 0, 128);
    struct sockaddr *sa = (struct sockaddr *)CONTEXT->buf;

    char *stap_retvalue = (char *)(unsigned long)STAP_RETVALUE;
    int maxstringlen = MAXSTRINGLEN;
    size_t n;

	if (ptr == NULL)
	{
		strlcpy(STAP_RETVALUE, "NULL", MAXSTRINGLEN);
		return;
	}

    // This helps handle variable lenght sockaddr_un.
    // Some application - like systemd - sends path string
    // without ending null character. Kernel will handle this
    // but we need pretty output without random memory stuff.
    memset(CONTEXT->buf, 0, 128);

    if (_stp_copy_from_user(CONTEXT->buf, ptr, len))
	{
		strlcpy(STAP_RETVALUE, "{...}", MAXSTRINGLEN);
		return;
	}

#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,11)
#define LPORT   (inet->inet.num)
#define DADDR   (&inet->inet.daddr)
#else
#define LPORT   (inet->num)
#define DADDR   (&inet->daddr)
#endif

// Use kernel builtin instead of picking up user space ntohs (function).
#define _stp_ntohs be16_to_cpu

	if ((sa->sa_family == AF_INET) && (len == sizeof(struct sockaddr_in)))
	{
		struct sockaddr_in *sin = (struct sockaddr_in *)CONTEXT->buf;

        if (what & SA_PRETTY)
        {
#ifndef NIPQUAD_FMT                     // kver >= 2.6.36
            snprintf(STAP_RETVALUE, MAXSTRINGLEN, "{AF_INET, %pI4, %d}",
                &sin->sin_addr, _stp_ntohs(sin->sin_port));
#else
            snprintf(STAP_RETVALUE, MAXSTRINGLEN,
                "{AF_INET, " NIPQUAD_FMT ", %d}",
                NIPQUAD(sin->sin_addr), _stp_ntohs(sin->sin_port));
#endif
            return;
        }

        if (what & SA_FAMILY)
        {
            n = strlcpy(stap_retvalue, "AF_INET", maxstringlen);
			// (n - 1) mean: cut of null char
			stap_retvalue += (n);
			maxstringlen -= (n - 1);
        }

        if (what & SA_IP_ADDR)
        {
#ifndef NIPQUAD_FMT                     // kver >= 2.6.36
            n = snprintf(stap_retvalue, maxstringlen, "%pI4", &sin->sin_addr);
#else
            n = snprintf(stap_retvalue, maxstringlen, NIPQUAD_FMT,
                    NIPQUAD(sin->sin_addr));
#endif
            // (n - 1) mean: cut of null char
            stap_retvalue += (n);
            maxstringlen -= (n - 1);
        }

        if (what & SA_TCP_PORT)
        {
            n = snprintf(stap_retvalue, maxstringlen, "%d",
            _stp_ntohs(sin->sin_port));
            // (n - 1) mean: cut of null char
            stap_retvalue += (n);
            maxstringlen -= (n - 1);
        }
	}
    // Why 2 * sizeof (char) here?
    // Because I want to support abstract sockets with
    // at least one usable byte after initial \0 char.
    // Unnamed sockets aren't supported yet.
	else if ((sa->sa_family == AF_UNIX)
            && ((len == sizeof(struct sockaddr_un))
            || (len >= ((sizeof(sa_family_t)) + (2 * sizeof(char))))))
	{
		struct sockaddr_un *sun = (struct sockaddr_un *)CONTEXT->buf;
		if (what & SA_PRETTY)
		{

			// Support for abstract sockets
			if (sun->sun_path[0] == '\0')
			{
                // Abstract sockets aren't string oriented.
                // We need conversion on this place.
                // No check of ret value, because _stp_text_str returns
                // "<unknown>" if bad things happen.
                //
                // Well. There can be NUL chars inside sun_path.
                // We just stop at first NUL char. 
                // TODO: We need byte oriented conversion function.
                _stp_text_str(CONTEXT->out_str, &sun->sun_path[1],
                    len - sizeof(sa_family_t), MAXSTRINGLEN - 1, 0, 0);
                snprintf(STAP_RETVALUE, MAXSTRINGLEN, "{AF_UNIX, \"\\000%s\"}",
                    CONTEXT->out_str);
            } else
			{
                // Just cut path if is too long
                CONTEXT->buf[127] = '\0';
                snprintf(STAP_RETVALUE, MAXSTRINGLEN, "{AF_UNIX, \"%s\"}",
                    sun->sun_path);
			}
		} else if (what & SA_FAMILY)
		{
            strlcpy(STAP_RETVALUE, "AF_UNIX", MAXSTRINGLEN);
		} else
		{
			strlcpy(STAP_RETVALUE, "", MAXSTRINGLEN);
		}
	}
	else if ((sa->sa_family == AF_NETLINK)
		 && (len == sizeof(struct sockaddr_nl)))
	{
		struct sockaddr_nl *nl = (struct sockaddr_nl *)CONTEXT->buf;

        if (what & SA_PRETTY) {
            snprintf(STAP_RETVALUE, MAXSTRINGLEN,
                "{AF_NETLINK, pid=%d, groups=%08x}",
                nl->nl_pid, nl->nl_groups);
        } else if (what & SA_FAMILY)
        {
            strlcpy(STAP_RETVALUE, "AF_NETLINK", MAXSTRINGLEN);
        } else
        {
            strlcpy(STAP_RETVALUE, "", MAXSTRINGLEN);
        }
    }
	else if ((sa->sa_family == AF_INET6)
		 && (len == sizeof(struct sockaddr_in6)))
	{
		struct sockaddr_in6 *sin = (struct sockaddr_in6 *)CONTEXT->buf;

        if (what & SA_PRETTY)
        {
#ifndef NIP6_FMT			// kver >= 2.6.36
            snprintf(STAP_RETVALUE, MAXSTRINGLEN,
                 "{AF_INET6, %pI6, %d}", &sin->sin6_addr,
                 _stp_ntohs(sin->sin6_port));
#else
            snprintf(STAP_RETVALUE, MAXSTRINGLEN,
                 "{AF_INET6, " NIP6_FMT ", %d}", NIP6(sin->sin6_addr),
                 _stp_ntohs(sin->sin6_port));
#endif
            return;
        }

        if (what & SA_FAMILY)
        {
            n = strlcpy(stap_retvalue, "AF_INET6", maxstringlen);
			// (n - 1) mean: cut of null char
			stap_retvalue += (n);
			maxstringlen -= (n - 1);
        }

        if (what & SA_IP_ADDR)
        {
#ifndef NIP6_FMT			// kver >= 2.6.36
            n = snprintf(stap_retvalue, maxstringlen,
                 "%pI6", &sin->sin6_addr);
#else
            n = snprintf(stap_retvalue, maxstringlen,
                 NIP6_FMT, NIP6(sin->sin6_addr));
#endif
			// (n - 1) mean: cut of null char
			stap_retvalue += (n);
			maxstringlen -= (n - 1);
        }

        if (what & SA_TCP_PORT)
        {
            n = snprintf(stap_retvalue, maxstringlen,
                "%d", _stp_ntohs(sin->sin6_port));
            // (n - 1) mean: cut of null char
            stap_retvalue += (n);
            maxstringlen -= (n - 1);
        }

        if (what & SA_IPV6_FLOWINFO)
        {
            n = snprintf(stap_retvalue, maxstringlen,
                 "%d", sin->sin6_flowinfo);
			// (n - 1) mean: cut of null char
			stap_retvalue += (n);
			maxstringlen -= (n - 1);
        }

        if (what & SA_IPV6_SCOPE_ID)
        {
            n = snprintf(stap_retvalue, maxstringlen,
                 "%d", sin->sin6_flowinfo);
			// (n - 1) mean: cut of null char
			stap_retvalue += (n);
			maxstringlen -= (n - 1);
        }
	}
	else if ((sa->sa_family == AF_PACKET)
		 && (len == sizeof(struct sockaddr_ll)))
	{
		struct sockaddr_ll *sll = (struct sockaddr_ll *)CONTEXT->buf;

        if (what & SA_PRETTY)
        {
            snprintf(STAP_RETVALUE, MAXSTRINGLEN,
                 "{AF_PACKET, proto=%d, ind=%d, hatype=%d, pkttype=%d, halen=%d, addr=0x%llx}",
                 (int)sll->sll_protocol, sll->sll_ifindex,
                 (int)sll->sll_hatype, (int)sll->sll_pkttype,
                 (int)sll->sll_halen,
                 (long long)(*(uint64_t *)sll->sll_addr));
        } else if (what & SA_FAMILY)
        { 
            strlcpy(STAP_RETVALUE, "AF_PACKET", MAXSTRINGLEN);
        } else
        {
            strlcpy(STAP_RETVALUE, "", MAXSTRINGLEN);
        }
	}
	else
	{
		if (len >= sizeof(sa_family_t))
		{
			snprintf(STAP_RETVALUE, MAXSTRINGLEN,
				 "{unknown sockaddr with sa=%d, salen=%d}",
				 sa->sa_family, (int) len);
		}
		else
		{
			snprintf(STAP_RETVALUE, MAXSTRINGLEN,
				 "{unknown sockaddr with salen=%d}", (int)len);
		}
	}
%}

function _struct_rlimit_u:string(uaddr:long)
%{ /* pure */
	struct rlimit rl;
	char *ptr = (char *)(unsigned long)STAP_ARG_uaddr;

	if (ptr == NULL)
		strlcpy (STAP_RETVALUE, "NULL", MAXSTRINGLEN);
	else {
		if (_stp_copy_from_user((char *)&rl, ptr, sizeof(struct rlimit)) == 0)
			snprintf(STAP_RETVALUE, MAXSTRINGLEN, "[%ld,%ld]",
				rl.rlim_cur, rl.rlim_max);
		else
			strlcpy (STAP_RETVALUE, "UNKNOWN", MAXSTRINGLEN);
	}
%}

function _fildes_index_u:long (uaddr:long, index:long)
%{ /* pure */
	int fd[2];
	char *ptr = (char *)(unsigned long)STAP_ARG_uaddr;

	if (ptr == NULL || !(STAP_ARG_index == 0 || STAP_ARG_index == 1))
		STAP_RETVALUE = 0;
	else {
		if (_stp_copy_from_user((char *)&fd, ptr, 2*sizeof(int)) == 0)
			STAP_RETVALUE = fd[STAP_ARG_index];
		else
			STAP_RETVALUE = 0;
	}
%}


function __sem_flags:string(semflg:long)
%{ /* pure */
	long semflg = STAP_ARG_semflg;
	char *str = STAP_RETVALUE;
	int mode = semflg & S_IRWXUGO;
	int len;

	str[0] = '\0';
	if (mode)
		snprintf(str, MAXSTRINGLEN, "%#o|", mode); 
	if (semflg & IPC_CREAT)
		strlcat(str, "IPC_CREAT|", MAXSTRINGLEN);
	if (semflg & IPC_EXCL)
		strlcat(str, "IPC_EXCL|", MAXSTRINGLEN);

	len = strlen(str);
	if (len)
		str[len-1] = 0;
%}


/* This function copies an argv from userspace. */
function __get_argv:string(argv:long, first:long)
{
%( CONFIG_64BIT == "y" %?
	if (first && argv)
		argv += 8
	while (argv) {
		vstr = user_long(argv)
		if (!vstr)
			break
		if (len)
			str .= " "
		str .= user_string_quoted(vstr)

		newlen = strlen(str)
		if (newlen == len)
			break
		len = newlen
		argv += 8
	}

	return str
%:
	return __get_compat_argv(argv, first)
%)
}
/* This function copies an argv from userspace. */
function __get_compat_argv:string(argv:long, first:long)
{
	if (first && argv)
		argv += 4
	while (argv) {
		vstr = user_int(argv) & 0xffffffff
		if (!vstr)
			break
		if (len)
			str .= " "
		str .= user_string_quoted(vstr)

		newlen = strlen(str)
		if (newlen == len)
			break
		len = newlen
		argv += 4
	}

	return str
}

/*
 * Return the  symbolic string  representation
 * of the struct timex.mode member of adjtimex
 * consult `man adjtimex` for more information
 * CALLERS:
 *    syscall.adjtimex
 */
function _adjtx_mode_str(f) {
   if((f & 32769) == 32769) bs="ADJ_OFFSET_SINGLESHOT|".bs
   if(f  & 16384) bs="ADJ_TICK|".bs
   if(f  & 32)    bs="ADJ_TIMECONST|".bs
   if(f  & 16)    bs="ADJ_STATUS|".bs
   if(f  & 8)     bs="ADJ_ESTERROR|".bs
   if(f  & 4)     bs="ADJ_MAXERROR|".bs
   if(f  & 2)     bs="ADJ_FREQUENCY|".bs
   if(f & 1 && ((f & 32769) != 32769)) bs="ADJ_OFFSET|".bs
   return substr(bs,0,strlen(bs)-1)
}

%{
#if (defined(CONFIG_INOTIFY) || defined(CONFIG_INOTIFY_USER))
#include <linux/inotify.h>
#endif
 
/* Ignore helper events IN_CLOSE and IN_MOVE, which are just
 * combinations of other events. */

static const _stp_val_array const _stp_inotify_watch_mask_list[] = {
	V(IN_ACCESS),
	V(IN_MODIFY),
	V(IN_ATTRIB),
	V(IN_CLOSE_WRITE),
	V(IN_CLOSE_NOWRITE),
	V(IN_OPEN),
 	V(IN_MOVED_FROM),
	V(IN_MOVED_TO),
	V(IN_CREATE),
	V(IN_DELETE),
	V(IN_DELETE_SELF),
	V(IN_MOVE_SELF),
	V(IN_UNMOUNT),
	V(IN_Q_OVERFLOW),
	V(IN_IGNORED),
	V(IN_ONLYDIR),
	V(IN_DONT_FOLLOW),
#ifdef IN_EXCL_UNLINK
	V(IN_EXCL_UNLINK),
#endif
	V(IN_MASK_ADD),
	V(IN_ISDIR),
	V(IN_ONESHOT),
	{0, NULL}
};
%}

function _inotify_watch_mask_str:string(mask:long)
%{ /* pure */
	uint32_t mask = (uint32_t)STAP_ARG_mask;
	_stp_lookup_or_str(_stp_inotify_watch_mask_list, mask, STAP_RETVALUE,
			   MAXSTRINGLEN);
%}

/*
 * Return the symbolic string representation
 * of the how argument given in *sigprocmask
 * consult  `man sigprocmask`  for more info
 * CALLERS:
 *    syscall.sigprocmask
 *    syscall.rt_sigprocmask
 */
function _sigprocmask_how_str:string(how:long)
%{ /* pure */
	int len;
	char *str = STAP_RETVALUE;
	switch (STAP_ARG_how) {
	case SIG_BLOCK:
		strlcpy(str, "SIG_BLOCK", MAXSTRINGLEN);
		break;
	case SIG_UNBLOCK:
		strlcpy(str, "SIG_UNBLOCK", MAXSTRINGLEN);
		break;
	case SIG_SETMASK:
		strlcpy(str, "SIG_SETMASK", MAXSTRINGLEN);
		break;
	default:
		snprintf(str, MAXSTRINGLEN, "0x%lx", (long)STAP_ARG_how);
	}	
%}

/*
 * Return the symbolic string representation
 * of the which argument  given to setitimer
 * consult  `man setitimer`  for  more  info
 * CALLERS:
 *    syscall.getitimer
 *    syscall.setitimer
 * INCLUDE: <linux/time.h>
 */
function _itimer_which_str(which) {
   if(which==0) return "ITIMER_REAL"
   if(which==1) return "ITIMER_VIRTUAL"
   if(which==2) return "ITIMER_PROF"
   return sprintf("BAD VALUE: %d", which)
}

/*
 * Return the command name for nfsservctl()
 * nfsservctl was removed in kernel 3.0/2.6.40.
 */
%( kernel_v < "2.6.40" && CONFIG_NFSD == "[ym]" %?
function _nfsctl_cmd_str(cmd) {
	if(cmd == 0) return "NFSCTL_SVC"
	if(cmd == 1) return "NFSCTL_ADDCLIENT"
	if(cmd == 2) return "NFSCTL_DELCLIENT"
	if(cmd == 3) return "NFSCTL_EXPORT"
	if(cmd == 4) return "NFSCTL_UNEXPORT"
	if(cmd == 5) return "NFSCTL_UGIDUPDATE"
	if(cmd == 6) return "NFSCTL_GETFH" 
	if(cmd == 7) return "NFSCTL_GETFD"
	if(cmd == 8) return "NFSCTL_GETFS"
	return sprintf("UNRECOGNIZED VALUE: %d", cmd)
}
%)

/*
 * Return  the  symbolic   string  representation
 * of the clockid argument  given to create_timer
 * consult  `man create_timer`  for  more  info
 * CALLERS:
 *    syscall.timer_create
 *    syscall.clock_settime
 *    syscall.clock_gettime
 *    syscall.clock_getres
 *    syscall.clock_nanosleep
 */
%{
#include <linux/time.h>

static const _stp_val_array const _stp_wc_str_list[] = {
	V(CLOCK_REALTIME),
	V(CLOCK_MONOTONIC),
	V(CLOCK_PROCESS_CPUTIME_ID),
	V(CLOCK_THREAD_CPUTIME_ID),
#ifdef CLOCK_MONOTONIC_RAW
	V(CLOCK_MONOTONIC_RAW),
#endif
#ifdef CLOCK_REALTIME_COARSE
	V(CLOCK_REALTIME_COARSE),
#endif
#ifdef CLOCK_MONOTONIC_COARSE
	V(CLOCK_MONOTONIC_COARSE),
#endif
#ifdef CLOCK_BOOTTIME
	V(CLOCK_BOOTTIME),
#endif
#ifdef CLOCK_REALTIME_ALARM
	V(CLOCK_REALTIME_ALARM),
#endif
#ifdef CLOCK_BOOTTIME_ALARM
	V(CLOCK_BOOTTIME_ALARM),
#endif
	V(CLOCK_SGI_CYCLE),
#ifdef CLOCK_TAI
	V(CLOCK_TAI),
#endif
	{0, NULL}
};
%}

function _get_wc_str:string(wc:long)
%{ /* pure */
	unsigned int clkid = (unsigned int)STAP_ARG_wc;
	_stp_lookup_str(_stp_wc_str_list, clkid, STAP_RETVALUE, MAXSTRINGLEN);
%}

function _flock_cmd_str(c) {
   if(c & 1) bs="LOCK_SH|".bs
   if(c & 2) bs="LOCK_EX|".bs
   if(c & 8) bs="LOCK_UN|".bs
   if(c & 4) bs="LOCK_NB|".bs
   return substr(bs,0,strlen(bs)-1)
}

/* `man 2 pipe2` for more information */
function _sys_pipe2_flag_str:string (f:long)
%{ /* pure */ /* unprivileged */
  long flags = STAP_ARG_f;
  char *str = STAP_RETVALUE;
  int len;

  str[0] = '\0';
#if defined(O_NONBLOCK)
  if (flags & O_NONBLOCK)
    strlcat(str, "O_NONBLOCK|", MAXSTRINGLEN);
#endif
#if defined(O_CLOEXEC)
  if (flags & O_CLOEXEC)
    strlcat(str, "O_CLOEXEC|", MAXSTRINGLEN);
#endif
  if (flags == 0) {
    strlcpy(str, "0", MAXSTRINGLEN);
    return;
  }

  len = strlen(str);
  if (len)
    str[strlen(str)-1] = '\0';
%}

%{
#include <linux/fcntl.h>
 
static const _stp_val_array const _stp_open_mode_flags_list[] = {
#ifdef O_CREAT
	V(O_CREAT),
#endif
#ifdef O_EXCL
	V(O_EXCL),
#endif
#ifdef O_NOCTTY
	V(O_NOCTTY),
#endif
#ifdef O_TRUNC
	V(O_TRUNC),
#endif
#ifdef O_APPEND
	V(O_APPEND),
#endif
#ifdef O_NONBLOCK
	V(O_NONBLOCK),
#endif

/* Here's a comment from the kernel source:
 *
 * ====
 * Before Linux 2.6.33 only O_DSYNC semantics were implemented, but using
 * the O_SYNC flag.  We continue to use the existing numerical value
 * for O_DSYNC semantics now, but using the correct symbolic name for it.
 * This new value is used to request true Posix O_SYNC semantics.  It is
 * defined in this strange way to make sure applications compiled against
 * new headers get at least O_DSYNC semantics on older kernels.
 * ====
 *
 * On RHEL6 (2.6.32-431.3.1.el6.x86_64), the user headers are ahead of
 * the kernel source and define O_DSYNC, but the kernel just ignores
 * the extra bit set. We'll try to handle it here.
 */
#ifndef O_DSYNC
	{ O_SYNC | 04000000, "O_SYNC" },
#endif
#ifdef O_SYNC
	V(O_SYNC),
#endif
#ifdef O_DSYNC
	V(O_DSYNC),
#endif
#ifdef O_ASYNC
	V(O_ASYNC),
#elif defined(FASYNC)
	{ FASYNC, "O_ASYNC" },
#endif
#ifdef O_DIRECT
	V(O_DIRECT),
#endif
#ifdef O_LARGEFILE
	V(O_LARGEFILE),
#endif
#ifdef O_DIRECTORY
	V(O_DIRECTORY),
#endif
#ifdef O_NOFOLLOW
	V(O_NOFOLLOW),
#endif
#ifdef O_NOATIME
	V(O_NOATIME),
#endif
#ifdef O_CLOEXEC
	V(O_CLOEXEC),
#endif
#ifdef O_PATH
	V(O_PATH),
#endif
	{0, NULL}
};
%}

/* `man 2 open` for more information */
function _sys_open_flag_str:string (f:long)
%{ /* pure */
	int flags = (int)STAP_ARG_f;
	int acc = flags & O_ACCMODE;

	switch (acc) {
	case O_WRONLY:
		strlcpy (STAP_RETVALUE, "O_WRONLY", MAXSTRINGLEN);
		break;
	case O_RDWR:
		strlcpy (STAP_RETVALUE, "O_RDWR", MAXSTRINGLEN);
		break;
	default:
		strlcpy (STAP_RETVALUE, "O_RDONLY", MAXSTRINGLEN);
	}

	flags &= ~O_ACCMODE;
	if (flags) {
		strlcat(STAP_RETVALUE, "|", MAXSTRINGLEN);
		_stp_lookup_or_str(_stp_open_mode_flags_list, flags,
				   STAP_RETVALUE, MAXSTRINGLEN);
	}
%}

%{
/* Notice that the kernel defines and the user defines are named
 * differently. */
static const _stp_val_array const _stp_access_mode_list[] = {
	{0, "F_OK"},
	{MAY_READ, "R_OK"},
	{MAY_WRITE, "W_OK"},
	{MAY_EXEC, "X_OK"},
	{0, NULL}
};
%}

/* `man 2 open` for more information */
function _access_mode_str:string(mode:long)
%{ /* pure */
	unsigned int mode = (unsigned int)STAP_ARG_mode;
	_stp_lookup_or_str(_stp_access_mode_list, mode, STAP_RETVALUE,
			   MAXSTRINGLEN);
%}

/* `man 2 open` for more information */
function _sys_open_mode_str(f) {
   if((f & 448) == 448) bs="S_IRWXU|".bs
   else {
        if(f & 256) bs="S_IRUSR|".bs
        if(f & 128) bs="S_IWUSR|".bs
        if(f & 64) bs="S_IXUSR|".bs
   }
   if((f & 56) == 56) bs="S_IRWXG|".bs
   else {
        if(f & 32) bs="S_IRGRP|".bs
        if(f & 16) bs="S_IWGRP|".bs
        if(f & 8) bs="S_IXGRP|".bs
   }
   if((f & 7) == 7) bs="S_IRWXO|".bs
   else {
        if(f & 4) bs="S_IROTH|".bs
        if(f & 2) bs="S_IWOTH|".bs
        if(f & 1) bs="S_IXOTH|".bs
   }
   return substr(bs,0,strlen(bs)-1)
}

/* `man 2 mknod` for more information */
function _mknod_mode_str(mode) {
   if((mode & 0xF000)==0x8000)
        return "S_IFREG|"._sys_open_mode_str(mode)
   if((mode & 0xF000)==0x2000)
        return "S_IFCHR|"._sys_open_mode_str(mode)
   if((mode & 0xF000)==0x6000)
        return "S_IFBLK|"._sys_open_mode_str(mode)
   if((mode & 0xF000)==0x1000)
        return "S_IFIFO|"._sys_open_mode_str(mode)
   if((mode & 0xF000)==0xC000)
        return "S_IFSOCK|"._sys_open_mode_str(mode)
   return ""
}

/* `man msync` for more information */
function _msync_flag_str(f) {
	if (f & 7 == 0) return ""
	if(f & 4) bs="MS_SYNC|".bs
	if(f & 2) bs="MS_INVALIDATE|".bs
	if(f & 1) bs="MS_ASYNC|".bs
	return substr(bs,0,strlen(bs)-1)
}

function _internal_wait_opt_str(f,bit_num,bit_str) {
  retval=""
  if (f & %{ WNOHANG %})
    {
      f&=%{ ~WNOHANG %}
      retval=retval."|WNOHANG"
    }
  if (f & bit_num)
    {
      f&=~bit_num
      retval=retval."|".bit_str
    }
  if (f & %{ WEXITED %})
    {
      f&=%{ ~WEXITED %}
      retval=retval."|WEXITED"
    }
  if (f & %{ WCONTINUED %})
    {
      f&=%{ ~WCONTINUED %}
      retval=retval."|WCONTINUED"
    }
  if (f & %{ WNOWAIT %})
    {
      f&=%{ ~WNOWAIT %}
      retval=retval."|WNOWAIT"
    }
  if (f & %{ __WNOTHREAD %})
    {
      f&=%{ ~__WNOTHREAD %}
      retval=retval."|__WNOTHREAD"
    }
  if (f & %{ __WALL %})
    {
      f&=%{ ~__WALL %}
      retval=retval."|__WALL"
    }
  if (f & %{ __WCLONE %})
    {
      f&=%{ ~__WCLONE %}
      retval=retval."|__WCLONE"
    }
  if (f != 0)
    retval=retval.sprintf ("|0x%x", f)
  else if (retval == "")
    return "0"
  return substr(retval,1,strlen(retval)-1)
}

/* `man wait4` for more information */
function _wait4_opt_str(f) {
   return _internal_wait_opt_str(f,%{ WUNTRACED %},"WUNTRACED")
}

/* `man waitid` for more information */
function _waitid_opt_str(f) {
   return _internal_wait_opt_str(f,%{ WSTOPPED %},"WSTOPPED")
}

function WIFEXITED(f) {
  return (f & 0x7f) == 0
}

function WEXITSTATUS(f) {
  return (f & 0xff00) >> 8
}

function WIFSIGNALED(f) {
  return (f & 0x7f) != 0 && (f & 0x7f) != 0x7f
}

function WCOREDUMP(f) {
  return f & 0x80
}

function WTERMSIG(f) {
  return f & 0x7f
}

function WIFSTOPPED(f) {
  return (f & 0xff) == 0x7f
}

function WSTOPSIG(f) {
  return (f & 0xff00) >> 8
}

function WIFCONTINUED(f) {
  return f == 0xffff
}

function _ptrace_event_name(f)
{
  if (f == %{ PTRACE_EVENT_FORK %})
    return "PTRACE_EVENT_FORK"
  if (f == %{ PTRACE_EVENT_VFORK %})
    return "PTRACE_EVENT_VFORK"
  if (f == %{ PTRACE_EVENT_CLONE %})
    return "PTRACE_EVENT_CLONE"
  if (f == %{ PTRACE_EVENT_EXEC %})
    return "PTRACE_EVENT_EXEC"
  if (f == %{ PTRACE_EVENT_VFORK_DONE %})
    return "PTRACE_EVENT_VFORK_DONE"
  if (f == %{ PTRACE_EVENT_EXIT %})
    return "PTRACE_EVENT_EXIT"
  return ""
}

/* `man 2 wait` for more information */
function _wait_status_str(f) {
  if ((f >> 16) != 0)
    tail = sprintf (" | 0x%x", f & ~0xffff)
  else
    tail = ""

  if (WIFEXITED(f))
    return sprintf ("WEXITSTATUS=%d", WEXITSTATUS(f)).tail
  if (WIFSIGNALED(f)) {
      if (WCOREDUMP(f))
        return "WCOREDUMP".tail
      return sprintf ("WTERMSIG=%s", _signal_name(WTERMSIG(f))).tail
    }
  if (WIFSTOPPED(f))
    {
      if (WSTOPSIG(f) == %{ SIGTRAP %})
	{
	  event = _ptrace_event_name (f >> 16)
	  if (event != "")
	    tail = " | ".event." << 8"
	}
      return sprintf ("WSTOPSIG=%s", _signal_name(WSTOPSIG(f))).tail
    }
  if (WIFCONTINUED(f))
    return "WIFCONTINUED".tail
  return sprintf ("?=0x%x", f)
}

%{
static const _stp_val_array const _stp_msg_flags_list[] = {
	V(MSG_OOB),
	V(MSG_PEEK),
	V(MSG_DONTROUTE),
	V(MSG_TRYHARD),
	V(MSG_CTRUNC),
	V(MSG_PROBE),
	V(MSG_TRUNC),
	V(MSG_DONTWAIT),
	V(MSG_EOR),
	V(MSG_WAITALL),
	V(MSG_FIN),
	V(MSG_SYN),
	V(MSG_CONFIRM),
	V(MSG_RST),
	V(MSG_ERRQUEUE),
	V(MSG_NOSIGNAL),
	V(MSG_MORE),
#ifdef MSG_WAITFORONE
	V(MSG_WAITFORONE),
#endif
#ifdef MSG_SENDPAGE_NOTLAST
	V(MSG_SENDPAGE_NOTLAST),
#endif
	V(MSG_EOF),
#ifdef MSG_FASTOPEN
	V(MSG_FASTOPEN),
#endif
#ifdef MSG_CMSG_CLOEXEC
	V(MSG_CMSG_CLOEXEC),
#endif
	{0, NULL}
};
%}

function _msg_flags_str:string(flags:long)
%{ /* pure */
	// Ignore MSG_CMSG_COMPAT in flags.
	_stp_lookup_or_str(_stp_msg_flags_list,
			   (STAP_ARG_flags & ~MSG_CMSG_COMPAT), STAP_RETVALUE,
			   MAXSTRINGLEN);
%}

%(systemtap_v <= "2.5" %?
function _sendflags_str:string(flags:long)
{
	return _msg_flags_str(flags)
}
function _recvflags_str:string(flags:long)
{
	return _msg_flags_str(flags)
}
%)

/* `man mlockall` for more information */
function _mlockall_flags_str:string(flags:long)
%{ /* pure */
	#include <linux/mman.h>
	int len;
	long f = STAP_ARG_flags;
	char *str = STAP_RETVALUE;
	str[0] = '\0';
	if (f & MCL_CURRENT)
		strlcat(str, "MCL_CURRENT|", MAXSTRINGLEN);
	if (f & MCL_FUTURE)
		strlcat(str, "MCL_FUTURE|", MAXSTRINGLEN);
	len = strlen(str);
	if (len)
		str[strlen(str)-1] = '\0';
	else	
		snprintf(str, MAXSTRINGLEN, "0x%lx", f);
%}

/* used by sys_delete_module */
function _module_flags_str:string(flags:long)
%{ /* pure */
	int len;
	long flags = STAP_ARG_flags;
	char *str = STAP_RETVALUE;
	str[0] = '\0';
	if (flags & O_TRUNC)
		strlcat(str,"O_TRUNC|", MAXSTRINGLEN);
	if (flags & O_NONBLOCK)
		strlcat(str,"O_NONBLOCK|", MAXSTRINGLEN);
	len = strlen(str);
	if (len)
		str[strlen(str)-1] = '\0';
%}

%{
#include <linux/sched.h>

static const _stp_val_array const _stp_sched_policy_list[] = {
	{SCHED_NORMAL, "SCHED_OTHER"}, // SCHED_NORMAL==SCHED_OTHER
	V(SCHED_FIFO),
	V(SCHED_RR),
	V(SCHED_BATCH),
#ifdef SCHED_IDLE
	V(SCHED_IDLE),
#endif
#ifdef SCHED_DEADLINE
	V(SCHED_DEADLINE),
#endif
	{0, NULL}
};
%}

function _sched_policy_str:string(policy:long)
%{ /* pure */
	unsigned int policy = (unsigned int)STAP_ARG_policy;
#ifdef SCHED_RESET_ON_FORK
	int reset_on_fork = (policy & SCHED_RESET_ON_FORK);
	policy &= ~SCHED_RESET_ON_FORK;
#endif
	_stp_lookup_str(_stp_sched_policy_list, policy, STAP_RETVALUE,
			MAXSTRINGLEN);
#ifdef SCHED_RESET_ON_FORK
	if (reset_on_fork)
		strlcat(STAP_RETVALUE, "|SCHED_RESET_ON_FORK", MAXSTRINGLEN);
#endif			
%}

%{
static const _stp_val_array const _stp_priority_which_list[] = {
	V(PRIO_PROCESS),
	V(PRIO_PGRP),
	V(PRIO_USER),
	{0, NULL}
};
%}

function _priority_which_str:string(which:long)
%{ /* pure */
	_stp_lookup_str(_stp_priority_which_list, (unsigned int)STAP_ARG_which,
			STAP_RETVALUE, MAXSTRINGLEN);
%}

%{
static const _stp_val_array const _stp_shutdown_how_list[] = {
	V(SHUT_RD),
	V(SHUT_WR),
	V(SHUT_RDWR),
	{0, NULL}
};
%}

function _shutdown_how_str:string(how:long)
%{ /* pure */
	_stp_lookup_str(_stp_shutdown_how_list, (unsigned int)STAP_ARG_how,
			STAP_RETVALUE, MAXSTRINGLEN);
%}

%{
// Needed for function __reboot_magic_str:string. Unfortunately cannot
// be inlined into the function since these header file defines static
// functions on some architectures.
#include <linux/reboot.h>

static const _stp_val_array const _stp_reboot_magic_list[] = {
	V(LINUX_REBOOT_MAGIC1),
	V(LINUX_REBOOT_MAGIC2),
	V(LINUX_REBOOT_MAGIC2A),
	V(LINUX_REBOOT_MAGIC2B),
	V(LINUX_REBOOT_MAGIC2C),
	{0, NULL}
};
%}

function _reboot_magic_str:string(magic:long)
%{ /* pure */
	unsigned int magic = (unsigned int)STAP_ARG_magic;
	_stp_lookup_str(_stp_reboot_magic_list, magic, STAP_RETVALUE,
			MAXSTRINGLEN);
%}

%{
#include <linux/reboot.h>
static const _stp_val_array const _stp_reboot_flag_list[] = {
	V(LINUX_REBOOT_CMD_RESTART),
	V(LINUX_REBOOT_CMD_HALT),
	V(LINUX_REBOOT_CMD_CAD_ON),
	V(LINUX_REBOOT_CMD_CAD_OFF),
	V(LINUX_REBOOT_CMD_POWER_OFF),
	V(LINUX_REBOOT_CMD_RESTART2),
	V(LINUX_REBOOT_CMD_SW_SUSPEND),
	V(LINUX_REBOOT_CMD_KEXEC),
	{0, NULL}
};	
%}

function _reboot_flag_str:string(flag:long)
%{  /* pure */
	unsigned int flag = (unsigned int)STAP_ARG_flag;
	_stp_lookup_str(_stp_reboot_flag_list, flag, STAP_RETVALUE,
			MAXSTRINGLEN);
%}

function _waitid_which_str(flag) {
   if(flag==0) return "P_ALL"
   if(flag==1) return "P_PID"
   if(flag==2) return "P_PGID"
   return sprintf("UNKNOWN VALUE: %d", flag)
}

function _futex_op_str(op) {
   if(op==0) return "FUTEX_WAIT"
   if(op==1) return "FUTEX_WAKE"
   if(op==2) return "FUTEX_FD"
   if(op==3) return "FUTEX_REQUEUE"
   if(op==4) return "FUTEX_CMP_REQUEUE"
   if(op==5) return "FUTEX_WAKE_OP"
   if(op==6) return "FUTEX_LOCK_PI"
   if(op==7) return "FUTEX_UNLOCK_PI"
   if(op==8) return "FUTEX_TRYLOCK_PI"
   if(op==128) return "FUTEX_WAIT_PRIVATE"
   if(op==129) return "FUTEX_WAKE_PRIVATE"
   if(op==131) return "FUTEX_REQUEUE_PRIVATE"
   if(op==132) return "FUTEX_CMP_REQUEUE_PRIVATE"
   if(op==133) return "FUTEX_WAKE_OP_PRIVATE"
   if(op==134) return "FUTEX_LOCK_PI_PRIVATE"
   if(op==135) return "FUTEX_UNLOCK_PI_PRIVATE"
   if(op==136) return "FUTEX_TRYLOCK_PI_PRIVATE"
   return sprintf("UNKNOWN VALUE: %d", op)
}

function _mountflags_str:string(op:long) 
%{ /* pure */
	int len, op = STAP_ARG_op;
	char *str = STAP_RETVALUE;
	str[0] = '\0';
	if (op & MS_BIND)
		strlcat(str,"MS_BIND|",MAXSTRINGLEN);
	if (op & MS_DIRSYNC)
		strlcat(str,"MS_DIRSYNC|",MAXSTRINGLEN);
	if (op & MS_MANDLOCK)
		strlcat(str,"MS_MANDLOCK|",MAXSTRINGLEN);
	if (op & MS_MOVE)
		strlcat(str,"MS_MOVE|",MAXSTRINGLEN);
	if (op & MS_NOATIME)
		strlcat(str,"MS_NOATIME|",MAXSTRINGLEN);
	if (op & MS_NODEV)
		strlcat(str,"MS_NODEV|",MAXSTRINGLEN);
	if (op & MS_NODIRATIME)
		strlcat(str,"MS_NODIRATIME|",MAXSTRINGLEN);
	if (op & MS_NOEXEC)
		strlcat(str,"MS_NOEXEC|",MAXSTRINGLEN);
	if (op & MS_NOSUID)
		strlcat(str,"MS_NOSUID|",MAXSTRINGLEN);
	if (op & MS_RDONLY)
		strlcat(str,"MS_RDONLY|",MAXSTRINGLEN);
	if (op & MS_REC)
		strlcat(str,"MS_REC|",MAXSTRINGLEN);
	if (op & MS_REMOUNT)
		strlcat(str,"MS_REMOUNT|",MAXSTRINGLEN);
	if (op & MS_SYNCHRONOUS)
		strlcat(str,"MS_SYNCHRONOUS|",MAXSTRINGLEN);
	if (op & MS_VERBOSE)
		strlcat(str,"MS_VERBOSE|",MAXSTRINGLEN);
	len = strlen(str);
	if (len)
		str[strlen(str)-1] = '\0';
%}

function _umountflags_str:string(op:long) 
%{ /* pure */
	int len, op = STAP_ARG_op;
	char *str = STAP_RETVALUE;
	if (op == 0)
		strlcpy(str,"0",MAXSTRINGLEN);
	else {
		str[0] = '\0';
		if (op & MNT_FORCE)
			strlcat(str,"MNT_FORCE|",MAXSTRINGLEN);
		if (op & MNT_DETACH)
			strlcat(str,"MNT_DETACH|",MAXSTRINGLEN);
		if (op & MNT_EXPIRE)
			strlcat(str,"MNT_EXPIRE|",MAXSTRINGLEN);
		len = strlen(str);
		if (len)
			str[strlen(str)-1] = '\0';
	}
%}

function _statfs_f_type_str(f) {
   if(f==0xadf5)     return "ADFS_SUPER_MAGIC"
   if(f==0xADFF)     return "AFFS_SUPER_MAGIC"
   if(f==0x42465331) return "BEFS_SUPER_MAGIC"
   if(f==0x1BADFACE) return "BFS_MAGIC"
   if(f==0xFF534D42) return "CIFS_MAGIC_NUMBER"
   if(f==0x73757245) return "CODA_SUPER_MAGIC"
   if(f==0x012FF7B7) return "COH_SUPER_MAGIC"
   if(f==0x28cd3d45) return "CRAMFS_MAGIC"
   if(f==0x1373)     return "DEVFS_SUPER_MAGIC"
   if(f==0x00414A53) return "EFS_SUPER_MAGIC"
   if(f==0x137D)     return "EXT_SUPER_MAGIC"
   if(f==0xEF51)     return "EXT2_OLD_SUPER_MAGIC"
   if(f==0xEF53)     return "EXT2_SUPER_MAGIC"
   if(f==0xEF53)     return "EXT3_SUPER_MAGIC"
   if(f==0x4244)     return "HFS_SUPER_MAGIC"
   if(f==0xF995E849) return "HPFS_SUPER_MAGIC"
   if(f==0x958458f6) return "HUGETLBFS_MAGIC"
   if(f==0x9660)     return "ISOFS_SUPER_MAGIC"
   if(f==0x72b6)     return "JFFS2_SUPER_MAGIC"
   if(f==0x3153464a) return "JFS_SUPER_MAGIC"
   if(f==0x137F)     return "MINIX_SUPER_MAGIC"
   if(f==0x138F)     return "MINIX_SUPER_MAGIC2"
   if(f==0x2468)     return "MINIX2_SUPER_MAGIC"
   if(f==0x2478)     return "MINIX2_SUPER_MAGIC2"
   if(f==0x4d44)     return "MSDOS_SUPER_MAGIC"
   if(f==0x564c)     return "NCP_SUPER_MAGIC"
   if(f==0x6969)     return "NFS_SUPER_MAGIC"
   if(f==0x5346544e) return "NTFS_SB_MAGIC"
   if(f==0x9fa1)     return "OPENPROM_SUPER_MAGIC"
   if(f==0x9fa0)     return "PROC_SUPER_MAGIC"
   if(f==0x002f)     return "QNX4_SUPER_MAGIC"
   if(f==0x52654973) return "REISERFS_SUPER_MAGIC"
   if(f==0x7275)     return "ROMFS_MAGIC"
   if(f==0x517B)     return "SMB_SUPER_MAGIC"
   if(f==0x012FF7B6) return "SYSV2_SUPER_MAGIC"
   if(f==0x012FF7B5) return "SYSV4_SUPER_MAGIC"
   if(f==0x01021994) return "TMPFS_MAGIC"
   if(f==0x15013346) return "UDF_SUPER_MAGIC"
   if(f==0x00011954) return "UFS_MAGIC"
   if(f==0x9fa2)     return "USBDEVICE_SUPER_MAGIC"
   if(f==0xa501FCF5) return "VXFS_SUPER_MAGIC"
   if(f==0x012FF7B4) return "XENIX_SUPER_MAGIC"
   if(f==0x58465342) return "XFS_SUPER_MAGIC"
   if(f==0x012FD16D) return "_XIAFS_SUPER_MAGIC"
   return sprintf("UNKNOWN VALUE: %d", f)
}

%{
#include <linux/mman.h>

static const _stp_val_array const _stp_mremap_flags_list[] = {
	V(MREMAP_MAYMOVE),
	V(MREMAP_FIXED),
	{0, NULL}
};
%}

function _mremap_flags:string(flags:long)
%{ /* pure */
	_stp_lookup_or_str(_stp_mremap_flags_list, (uint32_t)STAP_ARG_flags,
			   STAP_RETVALUE, MAXSTRINGLEN);
%}

%{
#include <linux/mman.h>

static const _stp_val_array const _stp_madvice_advice_list[] = {
	V(MADV_NORMAL),
	V(MADV_RANDOM),
	V(MADV_SEQUENTIAL),
	V(MADV_WILLNEED),
	V(MADV_DONTNEED),
	V(MADV_REMOVE),
	V(MADV_DONTFORK),
	V(MADV_DOFORK),
#ifdef MADV_HWPOISON
	V(MADV_HWPOISON),
#endif
#ifdef MADV_SOFT_OFFLINE
	V(MADV_SOFT_OFFLINE),
#endif
#ifdef MADV_MERGEABLE
	V(MADV_MERGEABLE),
#endif
#ifdef MADV_UNMERGEABLE
	V(MADV_UNMERGEABLE),
#endif
#ifdef MADV_HUGEPAGE
	V(MADV_HUGEPAGE),
#endif
#ifdef MADV_NOHUGEPAGE
	V(MADV_NOHUGEPAGE),
#endif
#ifdef MADV_DONTDUMP
	V(MADV_DONTDUMP),
#endif
#ifdef MADV_DODUMP
	V(MADV_DODUMP),
#endif
	{0, NULL}
};
%}

function _madvice_advice_str:string(behavior)
%{ /* pure */
	_stp_lookup_str(_stp_madvice_advice_list,
			(unsigned int)STAP_ARG_behavior, STAP_RETVALUE,
			MAXSTRINGLEN);
%}

function _fadvice_advice_str(behavior) {
   if(behavior==0x00000000) return "FADV_NORMAL"
   if(behavior==0x00000001) return "FADV_RANDOM"
   if(behavior==0x00000002) return "FADV_SEQUENTIAL"
   if(behavior==0x00000003) return "FADV_WILLNEED"
   if(behavior==0x00000004) return "FADV_DONTNEED"
   return sprintf("UNKNOWN VALUE: %d", behavior)
}

%{
#include <linux/fcntl.h>

static const _stp_val_array const _stp_fcntl_cmd_list[] = {
	V(F_DUPFD),
	V(F_GETFD),
	V(F_SETFD),
	V(F_GETFL),
	V(F_SETFL),
	V(F_GETLK),
	V(F_SETLK),
	V(F_SETLKW),
	V(F_SETOWN),
	V(F_GETOWN),
	V(F_SETSIG),
	V(F_GETSIG),
#ifdef F_GETLK64
	V(F_GETLK64),
#endif
#ifdef F_SETLK64
	V(F_SETLK64),
#endif
#ifdef F_SETLKW64
	V(F_SETLKW64),
#endif
#ifdef F_SETOWN_EX
	V(F_SETOWN_EX),
#endif
#ifdef F_GETOWN_EX
	V(F_GETOWN_EX),
#endif
#ifdef F_GETOWNER_UIDS
	V(F_GETOWNER_UIDS),
#endif
#ifdef F_SETLEASE
	V(F_SETLEASE),
#endif
#ifdef F_GETLEASE
	V(F_GETLEASE),
#endif
#ifdef F_DUPFD_CLOEXEC
 	V(F_DUPFD_CLOEXEC),
#endif
#ifdef F_NOTIFY
	V(F_NOTIFY),
#endif
#ifdef F_SETPIPE_SZ
	V(F_SETPIPE_SZ),
#endif
#ifdef F_GETPIPE_SZ
	V(F_GETPIPE_SZ),
#endif
	{0, NULL}
};
%}

function _fcntl_cmd_str:string(cmd:long)
%{
	_stp_lookup_str(_stp_fcntl_cmd_list, (unsigned int)STAP_ARG_cmd,
			STAP_RETVALUE, MAXSTRINGLEN);
%}

%{
#include <linux/fs.h>
#ifndef SEEK_SET
#define SEEK_SET	0
#endif
#ifndef SEEK_CUR
#define SEEK_CUR	1
#endif
#ifndef SEEK_END
#define SEEK_END	2
#endif
#ifndef SEEK_DATA
#define SEEK_DATA	3
#endif
#ifndef SEEK_HOLE
#define SEEK_HOLE	4
#endif
static const _stp_val_array const _stp_seek_whence_list[] = {
	V(SEEK_SET),
	V(SEEK_CUR),
	V(SEEK_END),
	V(SEEK_DATA),
	V(SEEK_HOLE),
	{0, NULL}
};

%}
function _seek_whence_str:string(w:long)
%{ /* pure */
	_stp_lookup_str(_stp_seek_whence_list, (unsigned int)STAP_ARG_w,
			STAP_RETVALUE, MAXSTRINGLEN);
%}

function _quotactl_cmd_str(cmd) {
   if(cmd==0x800002) return "Q_QUOTAON"
   if(cmd==0x800003) return "Q_QUOTAOFF"
   if(cmd==0x800007) return "Q_GETQUOTA"
   if(cmd==0x800008) return "Q_SETQUOTA"
   if(cmd==0x800005) return "Q_GETINFO"
   if(cmd==0x800006) return "Q_SETINFO"
   if(cmd==0x800004) return "Q_GETFMT"
   if(cmd==0x800001) return "Q_SYNC"
   /* XFS Quota Manager (XQM) Codes */
   if(cmd==0x5801) return "Q_XQUOTAON"
   if(cmd==0x5802) return "Q_XQUOTAOFF"
   if(cmd==0x5803) return "Q_XGETQUOTA"
   if(cmd==0x5804) return "Q_XSETQLIM"
   if(cmd==0x5805) return "Q_XGETQSTAT"
   if(cmd==0x5806) return "Q_XQUOTARM"
   if(cmd==0x5807) return "Q_XQUOTASYNC"
   return sprintf("UNKNOWN VALUE: %d", cmd)
}

%{
#include <linux/socket.h>

static const _stp_val_array const _stp_sockopt_optname_list[] = {
	V(SO_DEBUG),
	V(SO_REUSEADDR),
	V(SO_TYPE),
	V(SO_ERROR),
	V(SO_DONTROUTE),
	V(SO_BROADCAST),
	V(SO_SNDBUF),
	V(SO_RCVBUF),
	V(SO_SNDBUFFORCE),
	V(SO_RCVBUFFORCE),
	V(SO_KEEPALIVE),
	V(SO_OOBINLINE),
	V(SO_NO_CHECK),
	V(SO_PRIORITY),
	V(SO_LINGER),
	V(SO_BSDCOMPAT),
#ifdef SO_REUSEPORT
	V(SO_REUSEPORT),
#endif
	V(SO_PASSCRED),
	V(SO_PEERCRED),
	V(SO_RCVLOWAT),
	V(SO_SNDLOWAT),
	V(SO_RCVTIMEO),
	V(SO_SNDTIMEO),
	V(SO_SECURITY_AUTHENTICATION),
	V(SO_SECURITY_ENCRYPTION_TRANSPORT),
	V(SO_SECURITY_ENCRYPTION_NETWORK),
	V(SO_BINDTODEVICE),
	V(SO_ATTACH_FILTER),
	V(SO_DETACH_FILTER),
	V(SO_PEERNAME),
	V(SO_TIMESTAMP),
	V(SO_ACCEPTCONN),
	V(SO_PEERSEC),
	V(SO_PASSSEC),
#ifdef SO_TIMESTAMPNS
	V(SO_TIMESTAMPNS),
#endif
#ifdef SO_MARK
	V(SO_MARK),
#endif
#ifdef SO_TIMESTAMPING
	V(SO_TIMESTAMPING),
#endif
#ifdef SO_PROTOCOL
	V(SO_PROTOCOL),
#endif
#ifdef SO_DOMAIN
	V(SO_DOMAIN),
#endif
#ifdef SO_RXQ_OVFL
	V(SO_RXQ_OVFL),
#endif
#ifdef SO_WIFI_STATUS
	V(SO_WIFI_STATUS),
#endif
#ifdef SO_PEEK_OFF
	V(SO_PEEK_OFF),
#endif
#ifdef SO_NOFCS
	V(SO_NOFCS),
#endif
#ifdef SO_LOCK_FILTER
	V(SO_LOCK_FILTER),
#endif
#ifdef SO_SELECT_ERR_QUEUE
	V(SO_SELECT_ERR_QUEUE),
#endif
#ifdef SO_BUSY_POLL
	V(SO_BUSY_POLL),
#endif
#ifdef SO_MAX_PACING_RATE
	V(SO_MAX_PACING_RATE),
#endif
#ifdef SO_BPF_EXTENSIONS
	V(SO_BPF_EXTENSIONS),
#endif
	{0, NULL}
};
%}

/* see sys/socket.h (for setsockopt) */
function _sockopt_optname_str:string(opt:long)
%{ /* pure */
	_stp_lookup_str(_stp_sockopt_optname_list, STAP_ARG_opt, STAP_RETVALUE,
			MAXSTRINGLEN);
%}

%{
static const _stp_val_array const _stp_sockopt_level_list[] = {
	V(SOL_IP),
	V(SOL_SOCKET),
	V(SOL_TCP),
	V(SOL_UDP),
	V(SOL_IPV6),
	V(SOL_ICMPV6),
	V(SOL_SCTP),
#ifdef SOL_UDPLITE
	V(SOL_UDPLITE),
#endif
	V(SOL_RAW),
	V(SOL_IPX),
	V(SOL_AX25),
	V(SOL_ATALK),
	V(SOL_NETROM),
	V(SOL_ROSE),
	V(SOL_DECNET),
#ifdef SOL_X25
	V(SOL_X25),
#endif
	V(SOL_PACKET),
	V(SOL_ATM),
	V(SOL_AAL),
	V(SOL_IRDA),
	V(SOL_NETBEUI),
	V(SOL_LLC),
	V(SOL_DCCP),
	V(SOL_NETLINK),
	V(SOL_TIPC),
#ifdef SOL_RXRPC
	V(SOL_RXRPC),
#endif
#ifdef SOL_PPPOL2TP
	V(SOL_PPPOL2TP),
#endif
#ifdef SOL_BLUETOOTH
	V(SOL_BLUETOOTH),
#endif
#ifdef SOL_PNPIPE
	V(SOL_PNPIPE),
#endif
#ifdef SOL_RDS
	V(SOL_RDS),
#endif
	V(SOL_IUCV),
#ifdef SOL_CAIF
	V(SOL_CAIF),
#endif
#ifdef SOL_ALG
	V(SOL_ALG),
#endif
#ifdef SOL_NFC
	V(SOL_NFC),
#endif
	{0, NULL}
};
%}

/* `man 2 setsockopt` for more information */
function _sockopt_level_str:string(level:long)
%{ /* pure */
	_stp_lookup_str(_stp_sockopt_level_list, STAP_ARG_level, STAP_RETVALUE,
			MAXSTRINGLEN);
%}

function _sock_family_str(f) {
   if(f==0) return "PF_UNSPEC"
   if(f==1) return "PF_LOCAL"
   if(f==2) return "PF_INET"
   if(f==3) return "PF_AX25"
   if(f==4) return "PF_IPX"
   if(f==5) return "PF_APPLETALK"
   if(f==6) return "PF_NETROM"
   if(f==7) return "PF_BRIDGE"
   if(f==8) return "PF_ATMPVC"
   if(f==9) return "PF_X25"
   if(f==10) return "PF_INET6"
   if(f==11) return "PF_ROSE"
   if(f==12) return "PF_DECnet"
   if(f==13) return "PF_NETBEUI"
   if(f==14) return "PF_SECURITY"
   if(f==15) return "PF_KEY"
   if(f==16) return "PF_NETLINK"
   if(f==17) return "PF_PACKET"
   if(f==18) return "PF_ASH"
   if(f==19) return "PF_ECONET"
   if(f==20) return "PF_ATMSVC"
   if(f==22) return "PF_SNA"
   if(f==23) return "PF_IRDA"
   if(f==24) return "PF_PPPOX"
   if(f==25) return "PF_WANPIPE"
   if(f==26) return "PF_LLC"
   if(f==30) return "PF_TIPC"
   if(f==31) return "PF_BLUETOOTH"
   if(f==32) return "PF_IUCV"
   if(f==33) return "PF_RXRPC"
   return sprintf("UNKNOWN VALUE: %d", f)
}

function _sock_type_str:string(type:long)
%{ /* pure */
#ifdef SOCK_TYPE_MASK
	int flags = (int)STAP_ARG_type & ~SOCK_TYPE_MASK;
	int t = (int)STAP_ARG_type & SOCK_TYPE_MASK;
#else
	int t = (int)STAP_ARG_type;
#endif
	int data_added = 0;

	/*
	 * This is a bit tricky. We've got 2 types of information
	 * here. A socket type and a possible combination of socket
	 * flags. In addition, we only want one final listing of
	 * any unknown bits set.
	 *
	 * We can't call _stp_lookup_str() here since it would go
	 * ahead and display any unknown type value, and we want to
	 * wait until after any possible flags are displayed.
	 */
	switch (t) {
	case SOCK_STREAM:
		strlcpy (STAP_RETVALUE, "SOCK_STREAM", MAXSTRINGLEN);
		t = 0;
		data_added = 1;
		break;
	case SOCK_DGRAM:
		strlcpy (STAP_RETVALUE, "SOCK_DGRAM", MAXSTRINGLEN);
		t = 0;
		data_added = 1;
		break;
	case SOCK_RAW:
		strlcpy (STAP_RETVALUE, "SOCK_RAW", MAXSTRINGLEN);
		t = 0;
		data_added = 1;
		break;
	case SOCK_RDM:
		strlcpy (STAP_RETVALUE, "SOCK_RDM", MAXSTRINGLEN);
		t = 0;
		data_added = 1;
		break;
	case SOCK_SEQPACKET:
		strlcpy (STAP_RETVALUE, "SOCK_SEQPACKET", MAXSTRINGLEN);
		t = 0;
		data_added = 1;
		break;
#ifdef SOL_DCCP
	case SOCK_DCCP:
		strlcpy (STAP_RETVALUE, "SOCK_DCCP", MAXSTRINGLEN);
		t = 0;
		data_added = 1;
		break;
#endif
	case SOCK_PACKET:
		strlcpy (STAP_RETVALUE, "SOCK_PACKET", MAXSTRINGLEN);
		t = 0;
		data_added = 1;
		break;
	}

#ifdef SOCK_TYPE_MASK
	/* We can't use _stp_lookup_or_str() here since if none of
	 * these flags are set it would put a "0x0" on the end, which
	 * we don't want to add to the socket type. */
	if (flags & SOCK_CLOEXEC) {
		if (data_added)
			strlcat(STAP_RETVALUE, "|", MAXSTRINGLEN);
		strlcat (STAP_RETVALUE, "SOCK_CLOEXEC", MAXSTRINGLEN);
		flags &= ~SOCK_CLOEXEC;
		data_added = 1;
	}
	if (flags & SOCK_NONBLOCK) {
		if (data_added)
			strlcat(STAP_RETVALUE, "|", MAXSTRINGLEN);
		strlcat (STAP_RETVALUE, "SOCK_NONBLOCK", MAXSTRINGLEN);
		flags &= ~SOCK_NONBLOCK;
		data_added = 1;
	}
	
	/* If we have any leftover flags bits, add them back to the
	 * type bits to get displayed together. */
	t |= flags;
#endif

	/* Display any leftover bits. */
	if (t != 0 || !data_added) {
		int slen;
		if (data_added)
			strlcat(STAP_RETVALUE, "|", MAXSTRINGLEN);
		slen = strlen(STAP_RETVALUE);
		_stp_snprintf(STAP_RETVALUE + slen, MAXSTRINGLEN - slen,
			      "0x%x", t);
	}
%}

%{
static const _stp_val_array const _stp_sock_flags_list[] = {
#ifdef SOCK_TYPE_MASK
	V(SOCK_CLOEXEC),
	V(SOCK_NONBLOCK),
#endif
	{0, NULL}
};
%}

function _sock_flags_str:string(f:long)
%{ /* pure */
	_stp_lookup_or_str(_stp_sock_flags_list, (unsigned int)STAP_ARG_f,
			   STAP_RETVALUE, MAXSTRINGLEN);
%}

%{
// Be sure we have the IPPROTO_* defines. But, on some older kernels
// we don't have all of them defined. Also note that on some older
// kernels these values are enum values, not defines. But, the
// following code should work anyway.
#include <linux/in.h>
#ifndef IPPROTO_TP
#define IPPROTO_TP 29
#endif
#ifndef IPPROTO_MTP
#define IPPROTO_MTP 92
#endif
#ifndef IPPROTO_ENCAP
#define IPPROTO_ENCAP 98
#endif
#ifndef IPPROTO_UDPLITE
#define IPPROTO_UDPLITE 136
#endif
%}

function _sock_protocol_str:string(family:long, protocol:long) {
    if (family == %{ PF_INET %} || family == %{ PF_INET6 %}) {
	if (protocol == %{ IPPROTO_IP %}) return "IPPROTO_IP"
	if (protocol == %{ IPPROTO_ICMP %}) return "IPPROTO_ICMP"
	if (protocol == %{ IPPROTO_IGMP %}) return "IPPROTO_IGMP"
	if (protocol == %{ IPPROTO_IPIP %}) return "IPPROTO_IPIP"
	if (protocol == %{ IPPROTO_TCP %}) return "IPPROTO_TCP"
	if (protocol == %{ IPPROTO_EGP %}) return "IPPROTO_EGP"
	if (protocol == %{ IPPROTO_PUP %}) return "IPPROTO_PUP"
	if (protocol == %{ IPPROTO_UDP %}) return "IPPROTO_UDP"
	if (protocol == %{ IPPROTO_IDP %}) return "IPPROTO_IDP"
	if (protocol == %{ IPPROTO_TP %}) return "IPPROTO_TP"
	if (protocol == %{ IPPROTO_DCCP %}) return "IPPROTO_DCCP"
	if (protocol == %{ IPPROTO_IPV6 %}) return "IPPROTO_IPV6"
	if (protocol == %{ IPPROTO_RSVP %}) return "IPPROTO_RSVP"
	if (protocol == %{ IPPROTO_GRE %}) return "IPPROTO_GRE"
	if (protocol == %{ IPPROTO_ESP %}) return "IPPROTO_ESP"
	if (protocol == %{ IPPROTO_AH %}) return "IPPROTO_AH"
	if (protocol == %{ IPPROTO_MTP %}) return "IPPROTO_MTP"
	if (protocol == %{ IPPROTO_ENCAP %}) return "IPPROTO_ENCAP"
	if (protocol == %{ IPPROTO_PIM %}) return "IPPROTO_PIM"
	if (protocol == %{ IPPROTO_COMP %}) return "IPPROTO_COMP"
	if (protocol == %{ IPPROTO_SCTP %}) return "IPPROTO_SCTP"
	if (protocol == %{ IPPROTO_UDPLITE %}) return "IPPROTO_UDPLITE"
	if (protocol == %{ IPPROTO_RAW %}) return "IPPROTO_RAW"
    }
    return sprintf("%d", protocol)
}

function _opoll_op_str:string(o:long)
%{ /* pure */
	static const _stp_val_array const opoll_op_list[] = {
		V(EPOLL_CTL_ADD),
		V(EPOLL_CTL_MOD),
		V(EPOLL_CTL_DEL),
		{0, NULL}
	};
	_stp_lookup_str(opoll_op_list, (unsigned int)STAP_ARG_o,
			STAP_RETVALUE, MAXSTRINGLEN);
%}

function _epoll_events_str(e) {
   if(e==1) return "EPOLLIN"
   if(e==4) return "EPOLLOUT"
   if(e==2) return "EPOLLPRI"
   if(e==8) return "EPOLLERR"
   if(e==16) return "EPOLLHUP"
   if(e==-2147483648) return "EPOLLET"
   if(e==1073741824) return "EPOLLONESHOT"
   return sprintf("UNKNOWN VALUE: %d", e)
}

function _rlimit_resource_str(r) {
   if(r==-1) return "RLIM_INFINITY"
   if(r==9) return "RLIMIT_AS"
   if(r==4) return "RLIMIT_CORE"
   if(r==0) return "RLIMIT_CPU"
   if(r==2) return "RLIMIT_DATA"
   if(r==1) return "RLIMIT_FSIZE"
   if(r==10) return "RLIMIT_LOCKS"
   if(r==8) return "RLIMIT_MEMLOCK"
   if(r==7) return "RLIMIT_NOFILE"
   if(r==6) return "RLIMIT_NPROC"
   if(r==5) return "RLIMIT_RSS"
   if(r==3) return "RLIMIT_STACK"
%( kernel_v >= "2.6.8" %?
   if(r==11) return "RLIMIT_SIGPENDING"
   if(r==12) return "RLIMIT_MSGQUEUE"
%)
%( kernel_v >= "2.6.12" %?
   if(r==13) return "RLIMIT_NICE"
   if(r==14) return "RLIMIT_RTPRIO"
%)
   return sprintf("UNKNOWN VALUE: %d", r)
}

function _rusage_who_str(w) {
   if(w==0) return "RUSAGE_SELF"
   if(w==-1) return "RUSAGE_CHILDREN"
   if(w==-2) return "RUSAGE_BOTH"
   if(w==1) return "RUSAGE_THREAD"
   return sprintf("UNKNOWN VALUE: %d", w)
}

/* for accessing 16-bit values encoded in a long */
function __short:long(val:long) %{ /* pure */
	STAP_RETVALUE = (short)STAP_ARG_val;
%}

/* uid_t is unsigned, but calling functions take "-1" as a parameter */
/* so this hack is necessary to correct that mismatch. */
function __int32:long(val:long) %{ /* pure */
	STAP_RETVALUE = (int32_t)STAP_ARG_val;
%}

function __uint32:long(val:long) %{ /* pure */
	STAP_RETVALUE = (uint32_t)STAP_ARG_val;
%}

/* Unsigned values can get get sign-extended and become negative. */
function __ulong:long(val:long) %{ /* pure */
	STAP_RETVALUE = (unsigned long)STAP_ARG_val;
%}

# For utimensat and futimesat, the directory fd can have a special value
function _dfd_str:string(d:long)
{
	if (d == %{ AT_FDCWD %}) return "AT_FDCWD"
	return sprint(d)
}

function _adjtimex_return_str(ret) {
	if (ret == 0)
		val = "OK"
	else if (ret == 1)
		val = "INS"
	else if (ret == 2)
		val = "DEL"
	else if (ret == 3)
		val = "OOP"
	else if (ret == 4)
		val = "WAIT"
	else if (ret == 5)
		val = "BAD"

	if (val != "")
		return sprintf("%d (TIME_%s)", ret, val)
	else
		return return_str(1, ret)
}

%{
static const _stp_val_array const _stp_signal_list[] = {
	{0, "SIG_0"},
	V(SIGHUP),
	V(SIGINT),
	V(SIGQUIT),
	V(SIGILL),
	V(SIGTRAP),
	V(SIGABRT),
	V(SIGBUS),
	V(SIGFPE),
	V(SIGKILL),
	V(SIGUSR1),
	V(SIGSEGV),
	V(SIGPIPE),
	V(SIGUSR2),
	V(SIGALRM),
	V(SIGTERM),
	V(SIGCHLD),
	V(SIGCONT),
	V(SIGSTOP),
	V(SIGTSTP),
	V(SIGTTIN),
	V(SIGTTOU),
	V(SIGURG),
	V(SIGPROF),
	V(SIGWINCH),
	V(SIGVTALRM),
	{SIGIO,"SIGIO/SIGPOLL"},
	V(SIGPWR),
	{SIGTRAP|0x80,"TRACESYSGOOD"},
	{0, NULL}
};

static void _stp_sigset_str(sigset_t *mask, char *ptr, int len)
{
	const _stp_val_array * const array = _stp_signal_list;
	int i = 0, flag = 0;
	while (array[i].name) {
		if (array[i].val > 0 && array[i].val <= _NSIG
		    && sigismember(mask, array[i].val)) {
			if (flag)
				strlcat(ptr, "|", len);
			strlcat(ptr, array[i].name, len);
			flag = 1;
		}
		i++;
	}
	if (flag == 0)
		strlcat(ptr, "EMPTY", len);
}
%}

function _signal_name:string(sig:long)
%{ /* pure */
	_stp_lookup_str(_stp_signal_list, STAP_ARG_sig, STAP_RETVALUE, MAXSTRINGLEN);
%}

%{
static const _stp_val_array const _stp_semctl_list[] = {
	V(IPC_INFO),
	V(SEM_INFO),
	V(SEM_STAT),
	V(GETALL),
	V(GETVAL),
	V(GETPID),
	V(GETNCNT),
	V(GETZCNT),
	V(IPC_STAT),
	V(SETVAL),
	V(SETALL),
	V(IPC_RMID),
	V(IPC_SET),
	{0, NULL}
};
%}

function _semctl_cmd:string(cmd:long)
%{ /* pure */
	_stp_lookup_str(_stp_semctl_list, STAP_ARG_cmd, STAP_RETVALUE, MAXSTRINGLEN);
%}

function _stp_sigset_u:string(setptr:long)
%{ /* pure */
	char *ptr = (char *)(unsigned long)STAP_ARG_setptr;
	sigset_t set;

	if (ptr == NULL)
		strlcpy (STAP_RETVALUE, "NULL", MAXSTRINGLEN);
	else {
		if(_stp_copy_from_user((char*)&set,ptr,sizeof(sigset_t)) == 0)
			_stp_sigset_str(&set, STAP_RETVALUE, MAXSTRINGLEN);			
		else
			strlcpy (STAP_RETVALUE, "UNKNOWN", MAXSTRINGLEN);
	}
%}

function _stp_compat_sigset_u:string(setptr:long)
%{ /* pure */
#ifdef CONFIG_COMPAT
	char *ptr = (char *)(unsigned long)STAP_ARG_setptr;

	if (ptr == NULL)
		strlcpy (STAP_RETVALUE, "NULL", MAXSTRINGLEN);
	else {
		compat_sigset_t set;

		if (_stp_copy_from_user((char*)&set, ptr,
					sizeof(compat_sigset_t)) == 0) {
			sigset_t new_set;
			sigset_from_compat(&new_set, &set);
			_stp_sigset_str(&new_set, STAP_RETVALUE, MAXSTRINGLEN);
		}
		else
			strlcpy (STAP_RETVALUE, "UNKNOWN", MAXSTRINGLEN);
	}
#endif
%}

%{
static const _stp_val_array const _stp_fork_list[] = {
	V(CLONE_VM),
	V(CLONE_FS),
	V(CLONE_FILES),
	V(CLONE_SIGHAND),
	V(CLONE_PTRACE),
	V(CLONE_VFORK),
	V(CLONE_PARENT),
	V(CLONE_THREAD),
	V(CLONE_NEWNS),
	V(CLONE_SYSVSEM),
	V(CLONE_SETTLS),
	V(CLONE_PARENT_SETTID),
	V(CLONE_CHILD_CLEARTID),
	V(CLONE_DETACHED),
	V(CLONE_UNTRACED),
	V(CLONE_CHILD_SETTID),
#ifdef CLONE_STOPPED
	V(CLONE_STOPPED),
#endif
#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,19)
	V(CLONE_NEWUTS),
	V(CLONE_NEWIPC),
#endif
#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,23)
	V(CLONE_NEWUSER),
#endif
#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,24)
	V(CLONE_NEWPID),
	V(CLONE_NEWNET),
#endif
#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,25)
	V(CLONE_IO),
#endif
	{0, NULL}
};
%}

function __fork_flags:string(flags:long)
%{ /* pure */
	_stp_lookup_or_str(_stp_fork_list, STAP_ARG_flags & ~0xff, STAP_RETVALUE, MAXSTRINGLEN);
	if ( STAP_ARG_flags & 0xff ) {
		/* flags contains the termination signal */
		if (*STAP_RETVALUE)
			strlcat(STAP_RETVALUE, "|", MAXSTRINGLEN);
		_stp_lookup_str(_stp_signal_list, STAP_ARG_flags & 0xff, STAP_RETVALUE, MAXSTRINGLEN);
	}
%}

%{
static const _stp_val_array const _stp_atflag_list[] = {
#ifdef AT_SYMLINK_NOFOLLOW
	V(AT_SYMLINK_NOFOLLOW),
#endif
#ifdef AT_REMOVEDIR
	V(AT_REMOVEDIR),
#endif
#ifdef AT_SYMLINK_FOLLOW
	V(AT_SYMLINK_FOLLOW),
#endif
#ifdef AT_NO_AUTOMOUNT
	V(AT_NO_AUTOMOUNT),
#endif
#ifdef AT_EMPTY_PATH
	V(AT_EMPTY_PATH),
#endif
	{0, NULL}
};
%}

function _at_flag_str:string(f:long)
%{ /* pure */
	_stp_lookup_or_str(_stp_atflag_list, STAP_ARG_f, STAP_RETVALUE,
			   MAXSTRINGLEN);
%}

%{
#include <linux/eventpoll.h>
%}
function _epoll_create1_flag_str:string(f:long)
%{ /* pure */
	static const _stp_val_array const epoll_create1_flags_list[] = {
#ifdef EPOLL_CLOEXEC
		V(EPOLL_CLOEXEC),
#endif
		{0, NULL}
	};
	_stp_lookup_or_str(epoll_create1_flags_list, (unsigned int)STAP_ARG_f,
			   STAP_RETVALUE, MAXSTRINGLEN);
%}

%{
#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,22)
#include <linux/eventfd.h>
#endif

static const _stp_val_array const _stp_eventfd2_flag_list[] = {
#ifdef EFD_NONBLOCK
	V(EFD_NONBLOCK),
#endif
#ifdef EFD_CLOEXEC
	V(EFD_CLOEXEC),
#endif
#ifdef EFD_SEMAPHORE
	V(EFD_SEMAPHORE),
#endif
	{0, NULL}
};
%}
function _eventfd2_flag_str:string(flags:long)
%{ /* pure */
	uint32_t flags = (uint32_t)STAP_ARG_flags;
	_stp_lookup_or_str(_stp_eventfd2_flag_list, flags, STAP_RETVALUE,
			   MAXSTRINGLEN);
%}

%{
#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,22)
#include <linux/signalfd.h>
#endif
%}
function _signalfd4_flags_str:string(f:long)
%{ /* pure */
  long flags = STAP_ARG_f;
  char *str = STAP_RETVALUE;
  int len;

  str[0] = '\0';
#if defined(SFD_CLOEXEC) && defined(SFD_NONBLOCK)
  if (flags & SFD_NONBLOCK)
    strlcat(str, "SFD_NONBLOCK|", MAXSTRINGLEN);
  if (flags & SFD_CLOEXEC)
    strlcat(str, "SFD_CLOEXEC|", MAXSTRINGLEN);
#endif

  len = strlen(str);
  if (len)
    str[strlen(str)-1] = '\0';
%}

%{
#if (defined(CONFIG_INOTIFY) || defined(CONFIG_INOTIFY_USER))
#include <linux/inotify.h>
#endif

static const _stp_val_array const _stp_inotify_init1_flag_list[] = {
#if defined(IN_NONBLOCK)
	V(IN_NONBLOCK),
#endif
#if defined(IN_CLOEXEC)
	V(IN_CLOEXEC),
#endif
	{0, NULL}
};
%}

function _inotify_init1_flag_str:string(f:long)
%{ /* pure */
	unsigned int flags = (unsigned int)STAP_ARG_f;
	_stp_lookup_or_str(_stp_inotify_init1_flag_list, flags, STAP_RETVALUE,
			   MAXSTRINGLEN);
%}

function _dup3_flag_str:string(f:long)
%{ /* pure */
	unsigned int flags = (unsigned int)STAP_ARG_f;
	_stp_lookup_or_str(_stp_open_mode_flags_list, flags, STAP_RETVALUE,
			   MAXSTRINGLEN);
%}

%{
#include <linux/shm.h>
static const _stp_val_array const _stp_shmat_list[] = {
	V(SHM_RDONLY),
	V(SHM_RND),
	V(SHM_REMAP),
	V(SHM_EXEC),
	{0, NULL}
};
%}

function _shmat_flags_str:string(f:long)
%{ /* pure */
	_stp_lookup_or_str(_stp_shmat_list, STAP_ARG_f, STAP_RETVALUE, MAXSTRINGLEN);
%}


%{
#include <linux/mman.h>
static const _stp_val_array const _stp_mprotect_list[] = {
	{0, "PROT_NONE"},
	V(PROT_READ),
	V(PROT_WRITE),
	V(PROT_EXEC),
	V(PROT_SEM),
	{0, NULL}
};
%}

function _mprotect_prot_str:string(prot:long) 
%{ /* pure */
	_stp_lookup_or_str(_stp_mprotect_list, STAP_ARG_prot, STAP_RETVALUE, MAXSTRINGLEN);
%}

%{
#include <linux/mman.h>
static const _stp_val_array const _stp_mmap_list[] = {
	V(MAP_SHARED),
	V(MAP_PRIVATE),
	V(MAP_FIXED),
	V(MAP_ANONYMOUS),
	V(MAP_GROWSDOWN),
	V(MAP_DENYWRITE),
	V(MAP_EXECUTABLE),
	V(MAP_LOCKED),
	V(MAP_NORESERVE),
	V(MAP_POPULATE),
	V(MAP_NONBLOCK),
	{0, NULL}
};
%}

function _mmap_flags:string(flags:long) 
%{ /* pure */
	_stp_lookup_or_str(_stp_mmap_list, STAP_ARG_flags, STAP_RETVALUE, MAXSTRINGLEN);
%}

# old mmap functions passed in a struct like this.
#
function get_mmap_args:string (args:long)
%{ /* pure */
#if defined (__x86_64__) || defined (__ia64__)
	struct mmap_arg_struct {
		unsigned int addr;
		unsigned int len;
		unsigned int prot;
		unsigned int flags;
		int fd;
		unsigned int offset;
	} a;
#else
	struct mmap_arg_struct {
		unsigned long addr;
		unsigned long len;
		unsigned long prot;
		unsigned long flags;
		long fd;
		unsigned long offset;
	} a;
#endif

	if(_stp_copy_from_user((char *)&a,(char *)(unsigned long)STAP_ARG_args, sizeof(a))== 0) {
		int len;
		_stp_snprintf(STAP_RETVALUE, MAXSTRINGLEN, "0x%lx, %lu, ",
			      (unsigned long)a.addr, (unsigned long)a.len);
		_stp_lookup_or_str(_stp_mprotect_list, a.prot, STAP_RETVALUE, MAXSTRINGLEN);
		strlcat (STAP_RETVALUE, ", ", MAXSTRINGLEN);
		_stp_lookup_or_str(_stp_mmap_list, a.flags, STAP_RETVALUE, MAXSTRINGLEN);
		strlcat (STAP_RETVALUE, ", ", MAXSTRINGLEN);
		len = strlen(STAP_RETVALUE);
		_stp_snprintf(STAP_RETVALUE + len, MAXSTRINGLEN - len, "%ld, %ld", (long)a.fd, (long)a.offset);
	} else
		strlcpy (STAP_RETVALUE, "UNKNOWN", MAXSTRINGLEN);
%}


function _sighandler_str:string(uaddr:long)
%{ /* pure */
	static const _stp_val_array const _stp_sa_handler_list[] = {
		{0, "SIG_DFL"},
		{1, "SIG_IGN"},
		{0, NULL}
	};
	_stp_lookup_str(_stp_sa_handler_list, (long)STAP_ARG_uaddr, STAP_RETVALUE, MAXSTRINGLEN);
%}

%{
static void _stp_sigaction_str(struct sigaction *act, char *ptr, int len)
{
  static const _stp_val_array const _stp_sa_handler_list[] = {
    {0, "SIG_DFL"},
    {1, "SIG_IGN"},
    {0, NULL}
  };

  static const _stp_val_array const _stp_sa_flags_list[] = {
    V(SA_NOCLDSTOP),
    V(SA_NOCLDWAIT),
    V(SA_RESETHAND),
    V(SA_ONSTACK),
    V(SA_RESTART),
    V(SA_NODEFER),
    V(SA_SIGINFO),
#ifdef SA_RESTORER
    V(SA_RESTORER),
#endif
    {0, NULL}
  };
  
  int slen;
  _stp_lookup_str(_stp_sa_handler_list, (long)act->sa_handler,
		  ptr, len);
  if (act->sa_handler != SIG_IGN && act->sa_handler != SIG_DFL)
    {
      strlcat (ptr, ", ", len);
      _stp_lookup_or_str(_stp_sa_flags_list, act->sa_flags, ptr, len);
      strlcat (ptr, ", ", len);
#if !defined (__ia64__)
      slen = strlen(ptr);
      _stp_snprintf(ptr + slen, len - slen,
		    "0x%lx, [", (long)act->sa_restorer);
#else
      strlcat (ptr, "[", len);
#endif
      _stp_sigset_str(&act->sa_mask, ptr, len);
      strlcat (ptr, "]", len);
    }
}
%}

function _struct_sigaction_u:string(uaddr:long)
%{ /* pure */
  struct sigaction act;
  char *ptr = (char *)(unsigned long)STAP_ARG_uaddr;
  
  if (ptr == NULL)
    strlcpy (STAP_RETVALUE, "NULL", MAXSTRINGLEN);
  else
    {
      if(_stp_copy_from_user((char*)&act, ptr,
			     sizeof(struct sigaction)) == 0)
	_stp_sigaction_str(&act, STAP_RETVALUE, MAXSTRINGLEN);
      else
	strlcpy (STAP_RETVALUE, "UNKNOWN", MAXSTRINGLEN);
    }
%}

function _struct_sigaction32_u:string(uaddr:long)
%{ /* pure */
#ifdef CONFIG_COMPAT
#include <linux/compat.h>
  
#ifdef AUTOCONF_COMPAT_SIGACTION
  struct compat_sigaction act32;
#else
  // There seems to be no public cross arch header that defines this.
  // For x86, you can find it in asm/ia32.h.  For s390x, it is defined
  // in a private header.
  struct sigaction32 {
    compat_uptr_t  sa_handler;
    unsigned int sa_flags;
    unsigned int sa_restorer;       /* Another 32 bit pointer */
    compat_sigset_t sa_mask;        /* A 32 bit mask */
  };
  
  struct sigaction32 act32;
#endif

  char *ptr = (char *)(unsigned long)STAP_ARG_uaddr;
  
  if (ptr == NULL)
    strlcpy (STAP_RETVALUE, "NULL", MAXSTRINGLEN);
  else
    {
      if(_stp_copy_from_user((char*)&act32, ptr,
			     sizeof(act32)) == 0)
	{
	  struct sigaction act;

	  act.sa_handler = (void *)compat_ptr(act32.sa_handler);
	  act.sa_flags = (unsigned long)act32.sa_flags;
	  act.sa_restorer = (void *)compat_ptr(act32.sa_restorer);

	  /* swap words around to get right endian order. */
	  switch (_NSIG_WORDS)
	    {
	    case 4: act.sa_mask.sig[3] = act32.sa_mask.sig[6]
		| (((long)act32.sa_mask.sig[7]) << 32);
	    case 3: act.sa_mask.sig[2] = act32.sa_mask.sig[4]
		| (((long)act32.sa_mask.sig[5]) << 32);
	    case 2: act.sa_mask.sig[1] = act32.sa_mask.sig[2]
		| (((long)act32.sa_mask.sig[3]) << 32);
	    case 1: act.sa_mask.sig[0] = act32.sa_mask.sig[0]
		| (((long)act32.sa_mask.sig[1]) << 32);
	    }

	  _stp_sigaction_str(&act, STAP_RETVALUE, MAXSTRINGLEN);	  
	}
      else
	strlcpy (STAP_RETVALUE, "UNKNOWN", MAXSTRINGLEN);
    }
#endif
%}

function _struct_old_sigaction32_u:string(uaddr:long)
%{ /* pure */
#ifdef CONFIG_COMPAT
#include <linux/compat.h>

#ifdef CONFIG_COMPAT_OLD_SIGACTION
  struct compat_old_sigaction act32;
#else
  // There seems to be no public cross arch header that defines this.
  // For x86, you can find it in asm/ia32.h.  For s390x, it is defined
  // in a private header.
  struct old_sigaction32 {
    compat_uptr_t  sa_handler;
    compat_old_sigset_t sa_mask;    /* A 32 bit mask */
    unsigned int sa_flags;
    unsigned int sa_restorer;       /* Another 32 bit pointer */
  };

  struct old_sigaction32 act32;
#endif
  char *ptr = (char *)(unsigned long)STAP_ARG_uaddr;
  
  if (ptr == NULL)
    strlcpy (STAP_RETVALUE, "NULL", MAXSTRINGLEN);
  else
    {
      if(_stp_copy_from_user((char*)&act32, ptr, sizeof(act32)) == 0)
	{
	  struct sigaction act;

	  act.sa_handler = (void *)compat_ptr(act32.sa_handler);
	  act.sa_restorer = (void *)compat_ptr(act32.sa_restorer);
	  act.sa_flags = (unsigned long)act32.sa_flags;
	  siginitset(&act.sa_mask, act32.sa_mask);
	  _stp_sigaction_str(&act, STAP_RETVALUE, MAXSTRINGLEN);	  
	}
      else
	strlcpy (STAP_RETVALUE, "UNKNOWN", MAXSTRINGLEN);
    }
#endif
%}

/*
 * Function irqflags_str :
 * 	Returns the symbolic string representation of the IRQ flags.
 *
 */

%{
#include <linux/interrupt.h>
#ifndef IRQF_ONESHOT
#define IRQF_ONESHOT 0x00002000
#endif
static const _stp_val_array const _stp_irq_list[] = {
#ifdef IRQF_DISABLED
	V(IRQF_DISABLED),
#endif
#ifdef IRQF_SAMPLE_RANDOM
	V(IRQF_SAMPLE_RANDOM),
#endif
#ifdef IRQF_SHARED
	V(IRQF_SHARED),
#endif
#ifdef IRQF_PROBE_SHARED
	V(IRQF_PROBE_SHARED),
#endif
#ifdef IRQF_TIMER
	V(IRQF_TIMER),
#endif
#ifdef IRQF_PERCPU
	V(IRQF_PERCPU),
#endif
#ifdef IRQF_NOBALANCING
	V(IRQF_NOBALANCING),
#endif
#ifdef IRQF_IRQPOLL
	V(IRQF_IRQPOLL),
#endif
	V(IRQF_ONESHOT),
	{0, NULL}
};
%}

function irqflags_str:string(f:long)
%{ /* pure */
	_stp_lookup_or_str(_stp_irq_list, STAP_ARG_f, STAP_RETVALUE, MAXSTRINGLEN);
%}

/* PTRACE_SETOPTIONS parser of the DATA parameter. */
function _ptrace_options_str(f)
{
	retval=""
	if (f & %{ PTRACE_O_TRACESYSGOOD %}) {
		f&=%{ ~PTRACE_O_TRACESYSGOOD %}
		retval=retval."|PTRACE_O_TRACESYSGOOD"
	}
	if (f & %{ PTRACE_O_TRACEFORK %}) {
		f&=%{ ~PTRACE_O_TRACEFORK %}
		retval=retval."|PTRACE_O_TRACEFORK"
	}
	if (f & %{ PTRACE_O_TRACEVFORK %}) {
		f&=%{ ~PTRACE_O_TRACEVFORK %}
		retval=retval."|PTRACE_O_TRACEVFORK"
	}
	if (f & %{ PTRACE_O_TRACECLONE %}) {
		f&=%{ ~PTRACE_O_TRACECLONE %}
		retval=retval."|PTRACE_O_TRACECLONE"
	}
	if (f & %{ PTRACE_O_TRACEEXEC %}) {
		f&=%{ ~PTRACE_O_TRACEEXEC %}
		retval=retval."|PTRACE_O_TRACEEXEC"
	}
	if (f & %{ PTRACE_O_TRACEVFORKDONE %}) {
		f&=%{ ~PTRACE_O_TRACEVFORKDONE %}
		retval=retval."|PTRACE_O_TRACEVFORKDONE"
	}
	if (f & %{ PTRACE_O_TRACEEXIT %}) {
		f&=%{ ~PTRACE_O_TRACEEXIT %}
		retval=retval."|PTRACE_O_TRACEEXIT"
	}
	if (f != 0)
		retval=retval.sprintf("|0x%x",f)
	else if (retval == "")
		return "0"
	return substr(retval,1,strlen(retval)-1)
}

/* ptrace syscall provisioning of argstr. */
%{
#ifndef PTRACE_GETREGSET
# define PTRACE_GETREGSET 0x4204
#endif
#ifndef PTRACE_SETREGSET
# define PTRACE_SETREGSET 0x4205
#endif
%}
function _ptrace_argstr(request, pid, addr, data)
{
	retval=_arch_ptrace_argstr(request, pid, addr, data)
	if (retval != "")
		return retval
	if (request == %{ PTRACE_TRACEME %})
		return "PTRACE_TRACEME"
	if (request == %{ PTRACE_PEEKTEXT %})
		return sprintf ("PTRACE_PEEKTEXT, %d, addr=%p", pid, addr)
	if (request == %{ PTRACE_PEEKDATA %})
		return sprintf ("PTRACE_PEEKDATA, %d, addr=%p", pid, addr)
	if (request == %{ PTRACE_PEEKUSR %})
		return sprintf ("PTRACE_PEEKUSR, %d, addr=%p", pid, addr)
	if (request == %{ PTRACE_POKETEXT %})
		return sprintf ("PTRACE_POKETEXT, %d, addr=%p, data=%p", pid, addr, data)
	if (request == %{ PTRACE_POKEDATA %})
		return sprintf ("PTRACE_POKEDATA, %d, addr=%p, data=%p", pid, addr, data)
	if (request == %{ PTRACE_POKEUSR %})
		return sprintf ("PTRACE_POKEUSR, %d, addr=%p, data=%p", pid, addr, data)
	if (request == %{ PTRACE_CONT %})
		return sprintf ("PTRACE_CONT, %d, %s", pid, _signal_name (data))
	if (request == %{ PTRACE_KILL %})
		return sprintf ("PTRACE_KILL, %d", pid)
	if (request == %{ PTRACE_SINGLESTEP %})
		return sprintf ("PTRACE_SINGLESTEP, %d, %s", pid, _signal_name (data))
	if (request == %{ PTRACE_ATTACH %})
		return sprintf ("PTRACE_ATTACH, %d", pid)
	if (request == %{ PTRACE_DETACH %})
		return sprintf ("PTRACE_DETACH, %d, %s", pid, _signal_name (data))
	if (request == %{ PTRACE_SYSCALL %})
		return sprintf ("PTRACE_SYSCALL, %d, %s", pid, _signal_name (data))
	if (request == %{ PTRACE_SETOPTIONS %})
		return sprintf ("PTRACE_SETOPTIONS, %d, %s", pid, _ptrace_options_str (data))
	if (request == %{ PTRACE_GETEVENTMSG %})
		return sprintf ("PTRACE_GETEVENTMSG, %d, data=%p", pid, data)
	if (request == %{ PTRACE_GETSIGINFO %})
		// TODO: Retrieve *data in .return
		return sprintf ("PTRACE_GETSIGINFO, %d, data=%p", pid, data)
	if (request == %{ PTRACE_SETSIGINFO %})
		// TODO: Retrieve *data here
		return sprintf ("PTRACE_SETSIGINFO, %d, data=%p", pid, data)
	if (request == %{ PTRACE_GETREGSET %})
		// TODO
		return sprintf ("PTRACE_GETREGSET, %d, addr=%p, data=%p", pid, addr, data)
	if (request == %{ PTRACE_SETREGSET %})
		// TODO
		return sprintf ("PTRACE_SETREGSET, %d, addr=%p, data=%p", pid, addr, data)
	return sprintf("?=%d, %d, %p, %p", request, pid, addr, data)
}

/* ptrace.return syscall decoder for PTRACE_GETEVENTMSG. */
function _ptrace_return_geteventmsg_data(request,data)
{
	if (request == %{ PTRACE_GETEVENTMSG %})
		return user_long(data)
}

%{
#include <linux/swap.h>

static const _stp_val_array const _stp_swapon_flags_list[] = {
	V(SWAP_FLAG_PREFER),
#ifdef SWAP_FLAG_DISCARD
	V(SWAP_FLAG_DISCARD),
#endif
#ifdef SWAP_FLAG_DISCARD_ONCE
	V(SWAP_FLAG_DISCARD_ONCE),
#endif
#ifdef SWAP_FLAG_DISCARD_PAGES
	V(SWAP_FLAG_DISCARD_PAGES),
#endif
	{0, NULL}
};
%}

function _swapon_flags_str:string(flags:long)
%{ /* pure */
	unsigned int flags = (unsigned int)STAP_ARG_flags;
	_stp_lookup_or_str(_stp_swapon_flags_list,
			   (flags & ~SWAP_FLAG_PRIO_MASK), STAP_RETVALUE,
			   MAXSTRINGLEN);
	if (STAP_ARG_flags & SWAP_FLAG_PREFER) {
		int slen;
		slen = strlen(STAP_RETVALUE);
		_stp_snprintf(STAP_RETVALUE + slen, MAXSTRINGLEN - slen, 
			      "|%d", flags & SWAP_FLAG_PRIO_MASK);
	}
%}

/* do_fork helper function to determine fork type. */
function __is_user_regs:long (regs:long)
%{
	/* pure */
	struct pt_regs * regs = (void *)((unsigned long)STAP_ARG_regs);
/* copied from asm/ptrace.h */
#if defined(__i386__)
#ifdef STAPCONF_X86_UNIREGS
	int cs = kread(&regs->cs);
#else
	int cs = kread(&regs->xcs);
#endif
	STAP_RETVALUE = (!!((cs & 3)));
#elif defined(__x86_64__)
	unsigned long cs = kread(&regs->cs);
	STAP_RETVALUE = (!!((cs & 3)));
#elif defined(__ia64__)
	unsigned long psr = kread(&regs->cr_ipsr);
	STAP_RETVALUE = (((struct ia64_psr *) &psr)->cpl != 0);
#elif defined(__powerpc64__)
	unsigned long msr = kread(&regs->msr);
	STAP_RETVALUE = ((msr >> MSR_PR_LG) & 0x1);
#elif defined(__powerpc__)
	unsigned long msr = kread(&regs->msr);
	STAP_RETVALUE = ((msr >> MSR_PR) != 0);
#elif defined(__arm__)
	long cpsr = kread(&regs->ARM_cpsr);
	STAP_RETVALUE = ((cpsr & 0xf) == 0);
#elif defined(__s390__) || defined(__s390x__)
	unsigned long mask = kread(&regs->psw.mask);
	STAP_RETVALUE = ((mask & PSW_MASK_PSTATE) != 0);
#else
#error "Unimplemented architecture"
#endif
CATCH_DEREF_FAULT();
%}
